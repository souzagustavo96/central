{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { AuthToken, AccountEntity, CacheRecord, Authority, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Token cache manager\r\n */\nvar TokenCache = /** @class */function () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  }\n  // Move getAllAccounts here and cache utility APIs\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @returns `AuthenticationResult` for the response that was loaded.\r\n   */\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n    var idToken = new AuthToken(response.id_token, this.cryptoObj);\n    var cacheRecord;\n    var authority;\n    var cacheRecordAccount;\n    if (request.account) {\n      cacheRecordAccount = AccountEntity.createFromAccountInfo(request.account);\n      cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\n      // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        cacheRecordAccount = this.loadAccount(idToken, authority, options.clientInfo);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        cacheRecordAccount = this.loadAccount(idToken, authority, response.client_info);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n    return this.generateAuthenticationResult(request, idToken, cacheRecord, cacheRecordAccount, authority);\n  };\n  /**\r\n   * Helper function to load account to msal-browser cache\r\n   * @param idToken\r\n   * @param environment\r\n   * @param clientInfo\r\n   * @param authorityType\r\n   * @param requestHomeAccountId\r\n   * @returns `AccountEntity`\r\n   */\n  TokenCache.prototype.loadAccount = function (idToken, authority, clientInfo, requestHomeAccountId) {\n    var homeAccountId;\n    if (requestHomeAccountId) {\n      homeAccountId = requestHomeAccountId;\n    } else if (authority.authorityType !== undefined && clientInfo) {\n      homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idToken.claims);\n    }\n    if (!homeAccountId) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\n    }\n    var accountEntity = AccountEntity.createAccount({\n      homeAccountId: homeAccountId,\n      idTokenClaims: idToken.claims,\n      clientInfo: clientInfo,\n      environment: authority.hostnameAndPort\n    }, authority);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading account\");\n      this.storage.setAccount(accountEntity);\n      return accountEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `IdTokenEntity`\r\n   */\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setIdTokenCredential(idTokenEntity);\n      return idTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `AccessTokenEntity`\r\n   */\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return null;\n    }\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n      return accessTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load refresh tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @returns `RefreshTokenEntity`\r\n   */\n  TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n      return null;\n    }\n    var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading refresh token\");\n      this.storage.setRefreshTokenCredential(refreshTokenEntity);\n      return refreshTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to generate an `AuthenticationResult` for the result.\r\n   * @param request\r\n   * @param idTokenObj\r\n   * @param cacheRecord\r\n   * @param accountEntity\r\n   * @param authority\r\n   * @returns `AuthenticationResult`\r\n   */\n  TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, accountEntity, authority) {\n    var _a;\n    var accessToken = Constants.EMPTY_STRING;\n    var responseScopes = [];\n    var expiresOn = null;\n    var extExpiresOn;\n    if (cacheRecord.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n    var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n    var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n    return {\n      authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: accountEntity ? accountEntity.getAccountInfo() : null,\n      idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n      idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || Constants.EMPTY_STRING,\n      requestId: Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: Constants.EMPTY_STRING,\n      tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n      state: Constants.EMPTY_STRING,\n      cloudGraphHostName: accountEntity.cloudGraphHostName || Constants.EMPTY_STRING,\n      msGraphHost: accountEntity.msGraphHost || Constants.EMPTY_STRING,\n      code: undefined,\n      fromNativeBroker: false\n    };\n  };\n  return TokenCache;\n}();\nexport { TokenCache };","map":{"version":3,"names":["TokenCache","configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","prototype","loadExternalTokens","request","response","options","info","id_token","BrowserAuthError","createUnableToLoadTokenError","idToken","AuthToken","cacheRecord","authority","cacheRecordAccount","account","AccountEntity","createFromAccountInfo","CacheRecord","loadIdToken","homeAccountId","environment","tenantId","loadAccessToken","loadRefreshToken","authorityUrl","Authority","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","system","networkClient","clientInfo","trace","loadAccount","hostnameAndPort","tenant","client_info","generateAuthenticationResult","requestHomeAccountId","authorityType","undefined","generateHomeAccountId","claims","accountEntity","createAccount","idTokenClaims","verbose","setAccount","idTokenEntity","IdTokenEntity","createIdTokenEntity","rawToken","clientId","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","ScopeSet","printScopes","expiresOn","Date","getTime","accessTokenEntity","AccessTokenEntity","createAccessTokenEntity","setAccessTokenCredential","refresh_token","refreshTokenEntity","RefreshTokenEntity","createRefreshTokenEntity","setRefreshTokenCredential","idTokenObj","accessToken","Constants","EMPTY_STRING","responseScopes","extExpiresOn","secret","fromString","target","asArray","Number","uid","oid","sub","tid","canonicalAuthority","uniqueId","getAccountInfo","fromCache","correlationId","requestId","familyId","tokenType","_a","state","cloudGraphHostName","msGraphHost","code","fromNativeBroker"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-browser\\src\\cache\\TokenCache.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccessTokenEntity, ICrypto, IdTokenEntity, Logger, ScopeSet, Authority, AuthorityOptions, ExternalTokenResponse, AccountEntity, AuthToken, RefreshTokenEntity, CacheRecord, AuthenticationResult, Constants } from \"@azure/msal-common\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\r\nimport { ITokenCache } from \"./ITokenCache\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\nexport type LoadTokenOptions = {\r\n    clientInfo?: string,\r\n    expiresOn?: number,\r\n    extendedExpiresOn?: number\r\n};\r\n\r\n/**\r\n * Token cache manager\r\n */\r\nexport class TokenCache implements ITokenCache {\r\n    // Flag to indicate if in browser environment\r\n    public isBrowserEnvironment: boolean;\r\n    // Input configuration by developer/user\r\n    protected config: BrowserConfiguration;\r\n    // Browser cache storage\r\n    private storage: BrowserCacheManager;\r\n    // Logger\r\n    private logger: Logger;\r\n    // Crypto class\r\n    private cryptoObj: ICrypto;\r\n\r\n    constructor(configuration: BrowserConfiguration, storage: BrowserCacheManager, logger: Logger, cryptoObj: ICrypto) {\r\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\r\n        this.config = configuration;\r\n        this.storage = storage;\r\n        this.logger = logger;\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    // Move getAllAccounts here and cache utility APIs\r\n\r\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */\r\n    loadExternalTokens(request: SilentRequest, response: ExternalTokenResponse, options: LoadTokenOptions): AuthenticationResult {\r\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\r\n\r\n        if (!response.id_token) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\r\n        }\r\n\r\n        const idToken = new AuthToken(response.id_token, this.cryptoObj);\r\n\r\n        let cacheRecord: CacheRecord;\r\n        let authority: Authority | undefined;\r\n        let cacheRecordAccount: AccountEntity;\r\n\r\n        if (request.account) {\r\n            cacheRecordAccount = AccountEntity.createFromAccountInfo(request.account);\r\n            cacheRecord = new CacheRecord(\r\n                cacheRecordAccount,\r\n                this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId),\r\n                this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options),\r\n                this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment)\r\n            );\r\n        } else if (request.authority) {\r\n\r\n            const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\r\n            const authorityOptions: AuthorityOptions = {\r\n                protocolMode: this.config.auth.protocolMode,\r\n                knownAuthorities: this.config.auth.knownAuthorities,\r\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n                authorityMetadata: this.config.auth.authorityMetadata,\r\n                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\r\n            };\r\n            authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\r\n\r\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\r\n            if (options.clientInfo) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\r\n                cacheRecordAccount = this.loadAccount(\r\n                    idToken,\r\n                    authority,\r\n                    options.clientInfo\r\n                );\r\n                cacheRecord = new CacheRecord(\r\n                    cacheRecordAccount,\r\n                    this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant),\r\n                    this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options),\r\n                    this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort)\r\n                );\r\n            } else if (response.client_info) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\r\n                cacheRecordAccount = this.loadAccount(idToken, authority, response.client_info);\r\n                cacheRecord = new CacheRecord(\r\n                    cacheRecordAccount,\r\n                    this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant),\r\n                    this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options),\r\n                    this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort)\r\n                );\r\n            } else {\r\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\r\n            }\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\r\n        }\r\n\r\n        return this.generateAuthenticationResult(request, idToken, cacheRecord, cacheRecordAccount, authority);\r\n    }\r\n\r\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */\r\n    private loadAccount(idToken: AuthToken, authority: Authority, clientInfo?: string, requestHomeAccountId?: string): AccountEntity {\r\n\r\n        let homeAccountId;\r\n        if (requestHomeAccountId) {\r\n            homeAccountId = requestHomeAccountId;\r\n        } else if (authority.authorityType !== undefined && clientInfo) {\r\n            homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idToken.claims);\r\n        }\r\n\r\n        if (!homeAccountId) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\r\n        }\r\n\r\n        const accountEntity = AccountEntity.createAccount({homeAccountId, idTokenClaims: idToken.claims, clientInfo, environment: authority.hostnameAndPort}, authority);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading account\");\r\n\r\n            this.storage.setAccount(accountEntity);\r\n            return accountEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */\r\n    private loadIdToken(idToken: AuthToken, homeAccountId: string, environment: string, tenantId: string): IdTokenEntity {\r\n\r\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading id token\");\r\n            this.storage.setIdTokenCredential(idTokenEntity);\r\n            return idTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */\r\n    private loadAccessToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): AccessTokenEntity | null {\r\n\r\n        if (!response.access_token) {\r\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\r\n            return null;\r\n        }\r\n\r\n        if (!response.expires_in) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\r\n        }\r\n\r\n        if (!options.extendedExpiresOn) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\r\n        }\r\n\r\n        const scopes = new ScopeSet(request.scopes).printScopes();\r\n        const expiresOn = options.expiresOn || (response.expires_in + new Date().getTime() / 1000);\r\n        const extendedExpiresOn = options.extendedExpiresOn;\r\n\r\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading access token\");\r\n            this.storage.setAccessTokenCredential(accessTokenEntity);\r\n            return accessTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */\r\n    private loadRefreshToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string): RefreshTokenEntity | null {\r\n\r\n        if (!response.refresh_token) {\r\n            this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\r\n            return null;\r\n        }\r\n\r\n        const refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading refresh token\");\r\n            this.storage.setRefreshTokenCredential(refreshTokenEntity);\r\n            return refreshTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param accountEntity\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */\r\n    private generateAuthenticationResult(\r\n        request: SilentRequest,\r\n        idTokenObj: AuthToken,\r\n        cacheRecord: CacheRecord,\r\n        accountEntity: AccountEntity,\r\n        authority?: Authority,\r\n    ): AuthenticationResult {\r\n        let accessToken: string = Constants.EMPTY_STRING;\r\n        let responseScopes: Array<string> = [];\r\n        let expiresOn: Date | null = null;\r\n        let extExpiresOn: Date | undefined;\r\n\r\n        if (cacheRecord.accessToken) {\r\n            accessToken = cacheRecord.accessToken.secret;\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n        }\r\n\r\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\r\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\r\n\r\n        return {\r\n            authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: accountEntity ? accountEntity.getAccountInfo() : null,\r\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n            accessToken: accessToken,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            correlationId: request.correlationId || Constants.EMPTY_STRING,\r\n            requestId: Constants.EMPTY_STRING,\r\n            extExpiresOn: extExpiresOn,\r\n            familyId: Constants.EMPTY_STRING,\r\n            tokenType: cacheRecord?.accessToken?.tokenType || Constants.EMPTY_STRING,\r\n            state: Constants.EMPTY_STRING,\r\n            cloudGraphHostName: accountEntity.cloudGraphHostName || Constants.EMPTY_STRING,\r\n            msGraphHost: accountEntity.msGraphHost || Constants.EMPTY_STRING,\r\n            code: undefined,\r\n            fromNativeBroker: false\r\n        };\r\n    }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}