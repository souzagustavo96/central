{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\nvar UrlString = /** @class */function () {\n  function UrlString(url) {\n    this._urlString = url;\n    if (StringUtils.isEmpty(this._urlString)) {\n      // Throws error if url is empty\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n    if (StringUtils.isEmpty(this.getHash())) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n  Object.defineProperty(UrlString.prototype, \"urlString\", {\n    get: function () {\n      return this._urlString;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Ensure urls are lower case and end with a / character.\r\n   * @param url\r\n   */\n  UrlString.canonicalizeUri = function (url) {\n    if (url) {\n      var lowerCaseUrl = url.toLowerCase();\n      if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n      if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n      return lowerCaseUrl;\n    }\n    return url;\n  };\n  /**\r\n   * Throws if urlString passed is not a valid authority URI string.\r\n   */\n  UrlString.prototype.validateAsUri = function () {\n    // Attempts to parse url for uri components\n    var components;\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw ClientConfigurationError.createUrlParseError(e);\n    }\n    // Throw error if URI or path segments are not parseable.\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    }\n    // Throw error if uri is insecure.\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n    }\n  };\n  /**\r\n   * Given a url and a query string return the url with provided query string appended\r\n   * @param url\r\n   * @param queryString\r\n   */\n  UrlString.appendQueryString = function (url, queryString) {\n    if (StringUtils.isEmpty(queryString)) {\n      return url;\n    }\n    return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\n  };\n  /**\r\n   * Returns a url with the hash removed\r\n   * @param url\r\n   */\n  UrlString.removeHashFromUrl = function (url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  };\n  /**\r\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n   * @param href The url\r\n   * @param tenantId The tenant id to replace\r\n   */\n  UrlString.prototype.replaceTenantPath = function (tenantId) {\n    var urlObject = this.getUrlComponents();\n    var pathArray = urlObject.PathSegments;\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  };\n  /**\r\n   * Returns the anchor part(#) of the URL\r\n   */\n  UrlString.prototype.getHash = function () {\n    return UrlString.parseHash(this.urlString);\n  };\n  /**\r\n   * Parses out the components from a url string.\r\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n   */\n  UrlString.prototype.getUrlComponents = function () {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n    // If url string does not match regEx, we throw an error\n    var match = this.urlString.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    }\n    // Url component object\n    var urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    var pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(function (val) {\n      return val && val.length > 0;\n    }); // remove empty elements\n    urlComponents.PathSegments = pathSegments;\n    if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n    return urlComponents;\n  };\n  UrlString.getDomainFromUrl = function (url) {\n    var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    var match = url.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\n    }\n    return match[2];\n  };\n  UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n      var url = new UrlString(baseUrl);\n      var baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n    return relativeUrl;\n  };\n  /**\r\n   * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n   * @param hashString\r\n   */\n  UrlString.parseHash = function (hashString) {\n    var hashIndex1 = hashString.indexOf(\"#\");\n    var hashIndex2 = hashString.indexOf(\"#/\");\n    if (hashIndex2 > -1) {\n      return hashString.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return hashString.substring(hashIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Parses query string from given string. Returns empty string if no query symbol is found.\r\n   * @param queryString\r\n   */\n  UrlString.parseQueryString = function (queryString) {\n    var queryIndex1 = queryString.indexOf(\"?\");\n    var queryIndex2 = queryString.indexOf(\"/?\");\n    if (queryIndex2 > -1) {\n      return queryString.substring(queryIndex2 + 2);\n    } else if (queryIndex1 > -1) {\n      return queryString.substring(queryIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  };\n  UrlString.constructAuthorityUriFromObject = function (urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  };\n  /**\r\n   * Returns URL hash as server auth code response object.\r\n   */\n  UrlString.getDeserializedHash = function (hash) {\n    // Check if given hash is empty\n    if (StringUtils.isEmpty(hash)) {\n      return {};\n    }\n    // Strip the # symbol if present\n    var parsedHash = UrlString.parseHash(hash);\n    // If # symbol was not present, above will return empty string, so give original hash value\n    var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\n    // Check if deserialization didn't work\n    if (!deserializedHash) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n    }\n    return deserializedHash;\n  };\n  /**\r\n   * Returns URL query string as server auth code response object.\r\n   */\n  UrlString.getDeserializedQueryString = function (query) {\n    // Check if given query is empty\n    if (StringUtils.isEmpty(query)) {\n      return {};\n    }\n    // Strip the ? symbol if present\n    var parsedQueryString = UrlString.parseQueryString(query);\n    // If ? symbol was not present, above will return empty string, so give original query value\n    var deserializedQueryString = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedQueryString) ? query : parsedQueryString);\n    // Check if deserialization didn't work\n    if (!deserializedQueryString) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));\n    }\n    return deserializedQueryString;\n  };\n  /**\r\n   * Check if the hash of the URL string contains known properties\r\n   */\n  UrlString.hashContainsKnownProperties = function (hash) {\n    if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\n      // Hash doesn't contain key/value pairs\n      return false;\n    }\n    var parameters = UrlString.getDeserializedHash(hash);\n    return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);\n  };\n  return UrlString;\n}();\nexport { UrlString };","map":{"version":3,"names":["UrlString","url","_urlString","StringUtils","isEmpty","ClientConfigurationError","createUrlEmptyError","getHash","canonicalizeUri","Object","defineProperty","prototype","get","lowerCaseUrl","toLowerCase","endsWith","slice","validateAsUri","components","getUrlComponents","e","createUrlParseError","HostNameAndPort","PathSegments","urlString","Protocol","createInsecureAuthorityUriError","appendQueryString","queryString","indexOf","removeHashFromUrl","split","replaceTenantPath","tenantId","urlObject","pathArray","length","AADAuthorityConstants","COMMON","ORGANIZATIONS","constructAuthorityUriFromObject","parseHash","regEx","RegExp","match","urlComponents","AbsolutePath","QueryString","pathSegments","filter","val","substring","getDomainFromUrl","getAbsoluteUrl","relativeUrl","baseUrl","Constants","FORWARD_SLASH","baseComponents","hashString","hashIndex1","hashIndex2","EMPTY_STRING","parseQueryString","queryIndex1","queryIndex2","join","getDeserializedHash","hash","parsedHash","deserializedHash","queryStringToObject","ClientAuthError","createHashNotDeserializedError","JSON","stringify","getDeserializedQueryString","query","parsedQueryString","deserializedQueryString","hashContainsKnownProperties","parameters","code","error_description","error","state"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\url\\UrlString.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { IUri } from \"./IUri\";\r\nimport { AADAuthorityConstants, Constants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nexport class UrlString {\r\n\r\n    // internal url string field\r\n    private _urlString: string;\r\n    public get urlString(): string {\r\n        return this._urlString;\r\n    }\r\n\r\n    constructor(url: string) {\r\n        this._urlString = url;\r\n        if (StringUtils.isEmpty(this._urlString)) {\r\n            // Throws error if url is empty\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n\r\n        if (StringUtils.isEmpty(this.getHash())) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    static canonicalizeUri(url: string): string {\r\n        if (url) {\r\n            let lowerCaseUrl = url.toLowerCase();\r\n\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n\r\n            return lowerCaseUrl;\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    validateAsUri(): void {\r\n        // Attempts to parse url for uri components\r\n        let components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        } catch (e) {\r\n            throw ClientConfigurationError.createUrlParseError(e);\r\n        }\r\n\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\r\n        }\r\n\r\n        // Throw error if uri is insecure.\r\n        if(!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    static appendQueryString(url: string, queryString: string): string {\r\n        if (StringUtils.isEmpty(queryString)) {\r\n            return url;\r\n        }\r\n\r\n        return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\r\n    }\r\n\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    static removeHashFromUrl(url: string): string {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    }\r\n\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    replaceTenantPath(tenantId: string): UrlString {\r\n        const urlObject = this.getUrlComponents();\r\n        const pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    }\r\n\r\n    /**\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    getHash(): string {\r\n        return UrlString.parseHash(this.urlString);\r\n    }\r\n\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    getUrlComponents(): IUri {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n\r\n        // If url string does not match regEx, we throw an error\r\n        const match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\r\n        }\r\n\r\n        // Url component object\r\n        const urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7]\r\n        } as IUri;\r\n\r\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n\r\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length-1);\r\n        }\r\n        return urlComponents;\r\n    }\r\n\r\n    static getDomainFromUrl(url: string): string {\r\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n\r\n        const match = url.match(regEx);\r\n\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${url}`);\r\n        }\r\n\r\n        return match[2];\r\n    }\r\n\r\n    static getAbsoluteUrl(relativeUrl: string, baseUrl: string): string {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            const url = new UrlString(baseUrl);\r\n            const baseComponents = url.getUrlComponents();\r\n\r\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\r\n        }\r\n\r\n        return relativeUrl;\r\n    }\r\n\r\n    /**\r\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n     * @param hashString\r\n     */\r\n    static parseHash(hashString: string): string {\r\n        const hashIndex1 = hashString.indexOf(\"#\");\r\n        const hashIndex2 = hashString.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return hashString.substring(hashIndex2 + 2);\r\n        } else if (hashIndex1 > -1) {\r\n            return hashString.substring(hashIndex1 + 1);\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    }\r\n\r\n    /**\r\n     * Parses query string from given string. Returns empty string if no query symbol is found.\r\n     * @param queryString\r\n     */\r\n    static parseQueryString(queryString: string): string {\r\n        const queryIndex1 = queryString.indexOf(\"?\");\r\n        const queryIndex2 = queryString.indexOf(\"/?\");\r\n        if (queryIndex2 > -1) {\r\n            return queryString.substring(queryIndex2 + 2);\r\n        } else if (queryIndex1 > -1) {\r\n            return queryString.substring(queryIndex1 + 1);\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    }\r\n\r\n    static constructAuthorityUriFromObject(urlObject: IUri): UrlString {\r\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\r\n    }\r\n\r\n    /**\r\n     * Returns URL hash as server auth code response object.\r\n     */\r\n    static getDeserializedHash(hash: string): ServerAuthorizationCodeResponse {\r\n        // Check if given hash is empty\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return {};\r\n        }\r\n        // Strip the # symbol if present\r\n        const parsedHash = UrlString.parseHash(hash);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        const deserializedHash: ServerAuthorizationCodeResponse = StringUtils.queryStringToObject<ServerAuthorizationCodeResponse>(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedHash) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\r\n        }\r\n        return deserializedHash;\r\n    }\r\n\r\n    /**\r\n     * Returns URL query string as server auth code response object.\r\n     */\r\n    static getDeserializedQueryString(query: string): ServerAuthorizationCodeResponse {\r\n        // Check if given query is empty\r\n        if (StringUtils.isEmpty(query)) {\r\n            return {};\r\n        }\r\n        // Strip the ? symbol if present\r\n        const parsedQueryString = UrlString.parseQueryString(query);\r\n        // If ? symbol was not present, above will return empty string, so give original query value\r\n        const deserializedQueryString: ServerAuthorizationCodeResponse = StringUtils.queryStringToObject<ServerAuthorizationCodeResponse>(StringUtils.isEmpty(parsedQueryString) ? query : parsedQueryString);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedQueryString) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));\r\n        }\r\n        return deserializedQueryString;\r\n    }\r\n\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     */\r\n    static hashContainsKnownProperties(hash: string): boolean {\r\n        if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\r\n            // Hash doesn't contain key/value pairs\r\n            return false;\r\n        }\r\n\r\n        const parameters: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n        return !!(\r\n            parameters.code ||\r\n            parameters.error_description ||\r\n            parameters.error ||\r\n            parameters.state\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}