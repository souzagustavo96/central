{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\nvar CredentialEntity = /** @class */function () {\n  function CredentialEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  CredentialEntity.prototype.generateAccountId = function () {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  };\n  /**\r\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n   */\n  CredentialEntity.prototype.generateCredentialId = function () {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n  CredentialEntity.prototype.generateTarget = function () {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  };\n  /**\r\n   * generates credential key\r\n   */\n  CredentialEntity.prototype.generateCredentialKey = function () {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\n  };\n  /**\r\n   * returns the type of the cache (in this case credential)\r\n   */\n  CredentialEntity.prototype.generateType = function () {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        return CacheType.ACCESS_TOKEN;\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n      default:\n        {\n          throw ClientAuthError.createUnexpectedCredentialTypeError();\n        }\n    }\n  };\n  /**\r\n   * generates credential key\r\n   * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n   */\n  CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\n    var credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target), this.generateClaimsHashForCacheKey(requestedClaimsHash), this.generateSchemeForCacheKey(tokenType)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * generates Account Id for keys\r\n   * @param homeAccountId\r\n   * @param environment\r\n   */\n  CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\n    var accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generates Credential Id for keys\r\n   * @param credentialType\r\n   * @param realm\r\n   * @param clientId\r\n   * @param familyId\r\n   */\n  CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\n    var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    var credentialId = [credentialType, clientOrFamilyId, realm || Constants.EMPTY_STRING];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n  CredentialEntity.generateTargetForCacheKey = function (scopes) {\n    return (scopes || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate requested claims key component as per schema: <requestedClaims>\r\n   */\n  CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {\n    return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate scheme key componenet as per schema: <scheme>\r\n   */\n  CredentialEntity.generateSchemeForCacheKey = function (tokenType) {\n    /*\r\n     * PoP Tokens and SSH certs include scheme in cache key\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n    return tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\n  };\n  return CredentialEntity;\n}();\nexport { CredentialEntity };","map":{"version":3,"names":["CredentialEntity","prototype","generateAccountId","generateAccountIdForCacheKey","homeAccountId","environment","generateCredentialId","generateCredentialIdForCacheKey","credentialType","clientId","realm","familyId","generateTarget","generateTargetForCacheKey","target","generateCredentialKey","generateCredentialCacheKey","tokenType","requestedClaimsHash","generateType","CredentialType","ID_TOKEN","CacheType","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","ClientAuthError","createUnexpectedCredentialTypeError","credentialKey","generateClaimsHashForCacheKey","generateSchemeForCacheKey","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","accountId","clientOrFamilyId","credentialId","Constants","EMPTY_STRING","scopes","AuthenticationScheme","BEARER"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\cache\\entities\\CredentialEntity.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Separators, CredentialType, CacheType, Constants, AuthenticationScheme } from \"../../utils/Constants\";\r\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\r\n\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\r\nexport class CredentialEntity {\r\n    homeAccountId: string;\r\n    environment: string;\r\n    credentialType: CredentialType;\r\n    clientId: string;\r\n    secret: string;\r\n    familyId?: string;\r\n    realm?: string;\r\n    target?: string;\r\n    userAssertionHash?: string;\r\n    tokenType?: AuthenticationScheme;\r\n    keyId?: string;\r\n    requestedClaimsHash?: string;\r\n\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    generateAccountId(): string {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    }\r\n\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    generateCredentialId(): string {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.familyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    generateTarget(): string {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     */\r\n    generateCredentialKey(): string {\r\n        return CredentialEntity.generateCredentialCacheKey(\r\n            this.homeAccountId,\r\n            this.environment,\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.target,\r\n            this.familyId,\r\n            this.tokenType,\r\n            this.requestedClaimsHash,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    generateType(): number {\r\n        switch (this.credentialType) {\r\n            case CredentialType.ID_TOKEN:\r\n                return CacheType.ID_TOKEN;\r\n            case CredentialType.ACCESS_TOKEN:\r\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                return CacheType.ACCESS_TOKEN;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                return CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n     */\r\n    static generateCredentialCacheKey(\r\n        homeAccountId: string,\r\n        environment: string,\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        target?: string,\r\n        familyId?: string,\r\n        tokenType?: AuthenticationScheme,\r\n        requestedClaimsHash?: string\r\n    ): string {\r\n        const credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target),\r\n            this.generateClaimsHashForCacheKey(requestedClaimsHash),\r\n            this.generateSchemeForCacheKey(tokenType)\r\n        ];\r\n\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    private static generateAccountIdForCacheKey(\r\n        homeAccountId: string,\r\n        environment: string\r\n    ): string {\r\n        const accountId: Array<string> = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    private static generateCredentialIdForCacheKey(\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        familyId?: string\r\n    ): string {\r\n        const clientOrFamilyId =\r\n            credentialType === CredentialType.REFRESH_TOKEN\r\n                ? familyId || clientId\r\n                : clientId;\r\n        const credentialId: Array<string> = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || Constants.EMPTY_STRING,\r\n        ];\r\n\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    private static generateTargetForCacheKey(scopes?: string): string {\r\n        return (scopes || Constants.EMPTY_STRING).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate requested claims key component as per schema: <requestedClaims>\r\n     */\r\n    private static generateClaimsHashForCacheKey(requestedClaimsHash?: string): string {\r\n        return(requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate scheme key componenet as per schema: <scheme>\r\n     */\r\n    private static generateSchemeForCacheKey(tokenType?: string): string {\r\n        /*\r\n         * PoP Tokens and SSH certs include scheme in cache key\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        return (tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}