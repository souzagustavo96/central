{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 client credential grant\r\n */\nvar ClientCredentialClient = /** @class */function (_super) {\n  __extends(ClientCredentialClient, _super);\n  function ClientCredentialClient(configuration, appTokenProvider) {\n    var _this = _super.call(this, configuration) || this;\n    _this.appTokenProvider = appTokenProvider;\n    return _this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3 /*break*/, 4];\n            return [2 /*return*/, cachedAuthenticationResult];\n          case 4:\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 5:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2 /*return*/, null];\n            }\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2 /*return*/, null];\n            }\n            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n          case 1:\n            return [2 /*return*/, _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   */\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: Constants.EMPTY_STRING,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, queryParametersString, endpoint, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.appTokenProvider) return [3 /*break*/, 2];\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n            appTokenPropviderParameters = {\n              correlationId: request.correlationId,\n              tenantId: this.config.authOptions.authority.tenant,\n              scopes: request.scopes,\n              claims: request.claims\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.appTokenProvider(appTokenPropviderParameters)];\n          case 1:\n            appTokenProviderResult = _a.sent();\n            serverTokenResponse = {\n              access_token: appTokenProviderResult.accessToken,\n              expires_in: appTokenProviderResult.expiresInSeconds,\n              refresh_in: appTokenProviderResult.refreshInSeconds,\n              token_type: AuthenticationScheme.BEARER\n            };\n            return [3 /*break*/, 4];\n          case 2:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n          case 3:\n            response = _a.sent();\n            serverTokenResponse = response.body;\n            _a.label = 4;\n          case 4:\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(serverTokenResponse);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\n          case 5:\n            tokenResponse = _a.sent();\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    // Use clientAssertion from request, fallback to client assertion in base configuration\n    var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n    if (clientAssertion) {\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return ClientCredentialClient;\n}(BaseClient);\nexport { ClientCredentialClient };","map":{"version":3,"names":["ClientCredentialClient","_super","__extends","configuration","appTokenProvider","_this","call","prototype","acquireToken","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","sent","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","CacheOutcome","NO_CACHED_ACCESS_TOKEN","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","_b","CACHED_ACCESS_TOKEN_EXPIRED","ResponseHandler","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","_c","accessTokenFilter","homeAccountId","Constants","EMPTY_STRING","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","createSearchScopes","asArray","accessTokens","cacheManager","getAccessTokensByFilter","length","ClientAuthError","createMultipleMatchingTokensInCacheError","logger","info","appTokenPropviderParameters","correlationId","tenantId","claims","reqTimestamp","nowSeconds","appTokenProviderResult","serverTokenResponse","access_token","expires_in","expiresInSeconds","refresh_in","refreshInSeconds","token_type","AuthenticationScheme","BEARER","queryParametersString","createTokenQueryParameters","endpoint","UrlString","appendQueryString","tokenEndpoint","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","response","body","responseHandler","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","addClaims","createQueryString","BaseClient"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\client\\ClientCredentialClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType , CredentialType, CacheOutcome, Constants, AuthenticationScheme } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\r\nimport { CredentialFilter } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { IAppTokenProvider } from \"../config/AppTokenProvider\";\r\nimport { UrlString } from \"../url/UrlString\";\r\n\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nexport class ClientCredentialClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n    private readonly appTokenProvider?: IAppTokenProvider;\r\n\r\n    constructor(configuration: ClientConfiguration, appTokenProvider?: IAppTokenProvider) {\r\n        super(configuration);\r\n        this.appTokenProvider = appTokenProvider;\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n\r\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\r\n        if (cachedAuthenticationResult) {\r\n            return cachedAuthenticationResult;\r\n        } else {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n        \r\n        const cachedAccessToken = this.readAccessTokenFromCache();\r\n\r\n        if (!cachedAccessToken) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            return null;\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: null,\r\n                idToken: null,\r\n                accessToken: cachedAccessToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reads access token from the cache\r\n     */\r\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\r\n        const accessTokenFilter: CredentialFilter = {\r\n            homeAccountId: Constants.EMPTY_STRING,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\r\n        };\r\n\r\n        const accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        } else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\r\n        : Promise<AuthenticationResult | null> {\r\n        \r\n        let serverTokenResponse: ServerAuthorizationTokenResponse;\r\n        let reqTimestamp: number;\r\n\r\n        if (this.appTokenProvider) {\r\n            this.logger.info(\"Using appTokenProvider extensibility.\");\r\n\r\n            const appTokenPropviderParameters = {\r\n                correlationId: request.correlationId,\r\n                tenantId: this.config.authOptions.authority.tenant,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n            };\r\n\r\n            reqTimestamp = TimeUtils.nowSeconds();\r\n            const appTokenProviderResult = await this.appTokenProvider(appTokenPropviderParameters);\r\n\r\n            serverTokenResponse = {\r\n                access_token: appTokenProviderResult.accessToken, \r\n                expires_in: appTokenProviderResult.expiresInSeconds,\r\n                refresh_in: appTokenProviderResult.refreshInSeconds,\r\n                token_type : AuthenticationScheme.BEARER\r\n            };\r\n        } else {\r\n            const queryParametersString = this.createTokenQueryParameters(request);\r\n            const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n            const requestBody = this.createTokenRequestBody(request);\r\n            const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n            const thumbprint: RequestThumbprint = {\r\n                clientId: this.config.authOptions.clientId,\r\n                authority: request.authority,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n                authenticationScheme: request.authenticationScheme,\r\n                resourceRequestMethod: request.resourceRequestMethod,\r\n                resourceRequestUri: request.resourceRequestUri,\r\n                shrClaims: request.shrClaims,\r\n                sshKid: request.sshKid\r\n            };\r\n    \r\n            reqTimestamp = TimeUtils.nowSeconds();\r\n            const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n            serverTokenResponse = response.body;\r\n        }\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(serverTokenResponse);\r\n       \r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            serverTokenResponse,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        // Use clientAssertion from request, fallback to client assertion in base configuration\r\n        const clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\r\n\r\n        if (clientAssertion) {\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}