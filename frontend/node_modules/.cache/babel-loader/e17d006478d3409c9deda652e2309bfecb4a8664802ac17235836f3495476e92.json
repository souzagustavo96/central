{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __assign, __extends, __generator } from '../_virtual/_tslib.js';\nimport { Separators, CredentialType, AuthenticationScheme, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from './entities/AccountEntity.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { name, version } from '../packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\nvar CacheManager = /** @class */function () {\n  function CacheManager(clientId, cryptoImpl, logger) {\n    this.clientId = clientId;\n    this.cryptoImpl = cryptoImpl;\n    this.commonLogger = logger.clone(name, version);\n  }\n  /**\r\n   * Returns all accounts in cache\r\n   */\n  CacheManager.prototype.getAllAccounts = function () {\n    var _this = this;\n    var allAccountKeys = this.getAccountKeys();\n    if (allAccountKeys.length < 1) {\n      return [];\n    }\n    var accountEntities = allAccountKeys.reduce(function (accounts, key) {\n      var entity = _this.getAccount(key);\n      if (!entity) {\n        return accounts;\n      }\n      accounts.push(entity);\n      return accounts;\n    }, []);\n    if (accountEntities.length < 1) {\n      return [];\n    } else {\n      var allAccounts = accountEntities.map(function (accountEntity) {\n        return _this.getAccountInfoFromEntity(accountEntity);\n      });\n      return allAccounts;\n    }\n  };\n  /**\r\n   * Gets accountInfo object based on provided filters\r\n   */\n  CacheManager.prototype.getAccountInfoFilteredBy = function (accountFilter) {\n    var allAccounts = this.getAccountsFilteredBy(accountFilter);\n    if (allAccounts.length > 0) {\n      return this.getAccountInfoFromEntity(allAccounts[0]);\n    } else {\n      return null;\n    }\n  };\n  CacheManager.prototype.getAccountInfoFromEntity = function (accountEntity) {\n    var accountInfo = accountEntity.getAccountInfo();\n    var idToken = this.getIdToken(accountInfo);\n    if (idToken) {\n      accountInfo.idToken = idToken.secret;\n      accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\n    }\n    return accountInfo;\n  };\n  /**\r\n   * saves a cache record\r\n   * @param cacheRecord\r\n   */\n  CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!cacheRecord) {\n              throw ClientAuthError.createNullOrUndefinedCacheRecord();\n            }\n            if (!!cacheRecord.account) {\n              this.setAccount(cacheRecord.account);\n            }\n            if (!!cacheRecord.idToken) {\n              this.setIdTokenCredential(cacheRecord.idToken);\n            }\n            if (!!!cacheRecord.accessToken) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.saveAccessToken(cacheRecord.accessToken)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            if (!!cacheRecord.refreshToken) {\n              this.setRefreshTokenCredential(cacheRecord.refreshToken);\n            }\n            if (!!cacheRecord.appMetadata) {\n              this.setAppMetadata(cacheRecord.appMetadata);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * saves access token credential\r\n   * @param credential\r\n   */\n  CacheManager.prototype.saveAccessToken = function (credential) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accessTokenFilter, tokenKeys, currentScopes, removedAccessTokens;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            accessTokenFilter = {\n              clientId: credential.clientId,\n              credentialType: credential.credentialType,\n              environment: credential.environment,\n              homeAccountId: credential.homeAccountId,\n              realm: credential.realm,\n              tokenType: credential.tokenType,\n              requestedClaimsHash: credential.requestedClaimsHash\n            };\n            tokenKeys = this.getTokenKeys();\n            currentScopes = ScopeSet.fromString(credential.target);\n            removedAccessTokens = [];\n            tokenKeys.accessToken.forEach(function (key) {\n              if (!_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\n                return;\n              }\n              var tokenEntity = _this.getAccessTokenCredential(key);\n              if (tokenEntity && _this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\n                var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                  removedAccessTokens.push(_this.removeAccessToken(key));\n                }\n              }\n            });\n            return [4 /*yield*/, Promise.all(removedAccessTokens)];\n          case 1:\n            _a.sent();\n            this.setAccessTokenCredential(credential);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n  CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\n    var _this = this;\n    var allAccountKeys = this.getAccountKeys();\n    var matchingAccounts = [];\n    allAccountKeys.forEach(function (cacheKey) {\n      if (!_this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.realm)) {\n        // Don't parse value if the key doesn't match the account filters\n        return;\n      }\n      var entity = _this.getAccount(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (!!accountFilter.homeAccountId && !_this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\n        return;\n      }\n      if (!!accountFilter.localAccountId && !_this.matchLocalAccountId(entity, accountFilter.localAccountId)) {\n        return;\n      }\n      if (!!accountFilter.username && !_this.matchUsername(entity, accountFilter.username)) {\n        return;\n      }\n      if (!!accountFilter.environment && !_this.matchEnvironment(entity, accountFilter.environment)) {\n        return;\n      }\n      if (!!accountFilter.realm && !_this.matchRealm(entity, accountFilter.realm)) {\n        return;\n      }\n      if (!!accountFilter.nativeAccountId && !_this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\n        return;\n      }\n      matchingAccounts.push(entity);\n    });\n    return matchingAccounts;\n  };\n  /**\r\n   * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n   * @param key\r\n   * @param homeAccountId\r\n   * @param tenantId\r\n   * @returns\r\n   */\n  CacheManager.prototype.isAccountKey = function (key, homeAccountId, tenantId) {\n    if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\n      // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n      return false;\n    }\n    if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\n      return false;\n    }\n    if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n      return false;\n    }\n    // Do not check environment as aliasing can cause false negatives\n    return true;\n  };\n  /**\r\n   * Returns true if the given key matches our credential key schema.\r\n   * @param key\r\n   */\n  CacheManager.prototype.isCredentialKey = function (key) {\n    if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\n      // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n      return false;\n    }\n    var lowerCaseKey = key.toLowerCase();\n    // Credential keys must indicate what credential type they represent\n    if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\n      return false;\n    }\n    if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\n      // Refresh tokens must contain the client id or family id\n      var clientIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + this.clientId + Separators.CACHE_KEY_SEPARATOR;\n      var familyIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + THE_FAMILY_ID + Separators.CACHE_KEY_SEPARATOR;\n      if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\n        return false;\n      }\n    } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n      // Tokens must contain the clientId\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * Returns whether or not the given credential entity matches the filter\r\n   * @param entity\r\n   * @param filter\r\n   * @returns\r\n   */\n  CacheManager.prototype.credentialMatchesFilter = function (entity, filter) {\n    if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n      return false;\n    }\n    if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\n      return false;\n    }\n    /*\r\n     * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n     * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n     */\n    if (typeof filter.homeAccountId === \"string\" && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\n      return false;\n    }\n    if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n      return false;\n    }\n    if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n      return false;\n    }\n    if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\n      return false;\n    }\n    if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n      return false;\n    }\n    /*\r\n     * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n     * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n     */\n    if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n      return false;\n    }\n    // If request OR cached entity has requested Claims Hash, check if they match\n    if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n      // Don't match if either is undefined or they are different\n      if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n        return false;\n      }\n    }\n    // Access Token with Auth Scheme specific matching\n    if (entity.credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n      if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\n        return false;\n      }\n      // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n      if (filter.tokenType === AuthenticationScheme.SSH) {\n        if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  /**\r\n   * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n   * @param filter\r\n   */\n  CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\n    return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\n  };\n  /**\r\n   * Support function to help match appMetadata\r\n   * @param environment\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    var matchingAppMetadata = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-appMetadata type cache entities\n      if (!_this.isAppMetadata(cacheKey)) {\n        return;\n      }\n      // Attempt retrieval\n      var entity = _this.getAppMetadata(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n      matchingAppMetadata[cacheKey] = entity;\n    });\n    return matchingAppMetadata;\n  };\n  /**\r\n   * retrieve authorityMetadata that contains a matching alias\r\n   * @param filter\r\n   */\n  CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\n    var _this = this;\n    var allCacheKeys = this.getAuthorityMetadataKeys();\n    var matchedEntity = null;\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-authorityMetadata type cache entities\n      if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\n        return;\n      }\n      // Attempt retrieval\n      var entity = _this.getAuthorityMetadata(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (entity.aliases.indexOf(host) === -1) {\n        return;\n      }\n      matchedEntity = entity;\n    });\n    return matchedEntity;\n  };\n  /**\r\n   * Removes all accounts and related tokens from cache.\r\n   */\n  CacheManager.prototype.removeAllAccounts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allAccountKeys, removedAccounts;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allAccountKeys = this.getAccountKeys();\n            removedAccounts = [];\n            allAccountKeys.forEach(function (cacheKey) {\n              removedAccounts.push(_this.removeAccount(cacheKey));\n            });\n            return [4 /*yield*/, Promise.all(removedAccounts)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes the account and related tokens for a given account key\r\n   * @param account\r\n   */\n  CacheManager.prototype.removeAccount = function (accountKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            account = this.getAccount(accountKey);\n            if (!account) {\n              throw ClientAuthError.createNoAccountFoundError();\n            }\n            return [4 /*yield*/, this.removeAccountContext(account)];\n          case 1:\n            _a.sent();\n            this.removeItem(accountKey);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes credentials associated with the provided account\r\n   * @param account\r\n   */\n  CacheManager.prototype.removeAccountContext = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allTokenKeys, accountId, removedCredentials;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allTokenKeys = this.getTokenKeys();\n            accountId = account.generateAccountId();\n            removedCredentials = [];\n            allTokenKeys.idToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                _this.removeIdToken(key);\n              }\n            });\n            allTokenKeys.accessToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                removedCredentials.push(_this.removeAccessToken(key));\n              }\n            });\n            allTokenKeys.refreshToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                _this.removeRefreshToken(key);\n              }\n            });\n            return [4 /*yield*/, Promise.all(removedCredentials)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * returns a boolean if the given credential is removed\r\n   * @param credential\r\n   */\n  CacheManager.prototype.removeAccessToken = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credential, accessTokenWithAuthSchemeEntity, kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            credential = this.getAccessTokenCredential(key);\n            if (!credential) {\n              return [2 /*return*/];\n            }\n            if (!(credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3 /*break*/, 4];\n            if (!(credential.tokenType === AuthenticationScheme.POP)) return [3 /*break*/, 4];\n            accessTokenWithAuthSchemeEntity = credential;\n            kid = accessTokenWithAuthSchemeEntity.keyId;\n            if (!kid) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.cryptoImpl.removeTokenBindingKey(kid)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            _a.sent();\n            throw ClientAuthError.createBindingKeyNotRemovedError();\n          case 4:\n            return [2 /*return*/, this.removeItem(key)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all app metadata objects from cache.\r\n   */\n  CacheManager.prototype.removeAppMetadata = function () {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(function (cacheKey) {\n      if (_this.isAppMetadata(cacheKey)) {\n        _this.removeItem(cacheKey);\n      }\n    });\n    return true;\n  };\n  /**\r\n   * Retrieve the cached credentials into a cacherecord\r\n   * @param account\r\n   * @param clientId\r\n   * @param scopes\r\n   * @param environment\r\n   * @param authScheme\r\n   */\n  CacheManager.prototype.readCacheRecord = function (account, request, environment) {\n    var tokenKeys = this.getTokenKeys();\n    var cachedAccount = this.readAccountFromCache(account);\n    var cachedIdToken = this.getIdToken(account, tokenKeys);\n    var cachedAccessToken = this.getAccessToken(account, request, tokenKeys);\n    var cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys);\n    var cachedAppMetadata = this.readAppMetadataFromCache(environment);\n    if (cachedAccount && cachedIdToken) {\n      cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\n    }\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  };\n  /**\r\n   * Retrieve AccountEntity from cache\r\n   * @param account\r\n   */\n  CacheManager.prototype.readAccountFromCache = function (account) {\n    var accountKey = AccountEntity.generateAccountCacheKey(account);\n    return this.getAccount(accountKey);\n  };\n  /**\r\n   * Retrieve IdTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param inputRealm\r\n   */\n  CacheManager.prototype.getIdToken = function (account, tokenKeys) {\n    var _this = this;\n    this.commonLogger.trace(\"CacheManager - getIdToken called\");\n    var idTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.clientId,\n      realm: account.tenantId\n    };\n    var idTokens = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\n    var numIdTokens = idTokens.length;\n    if (numIdTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n      return null;\n    } else if (numIdTokens > 1) {\n      this.commonLogger.info(\"CacheManager:getIdToken - Multiple id tokens found, clearing them\");\n      idTokens.forEach(function (idToken) {\n        _this.removeIdToken(idToken.generateCredentialKey());\n      });\n      return null;\n    }\n    this.commonLogger.info(\"CacheManager:getIdToken - Returning id token\");\n    return idTokens[0];\n  };\n  /**\r\n   * Gets all idTokens matching the given filter\r\n   * @param filter\r\n   * @returns\r\n   */\n  CacheManager.prototype.getIdTokensByFilter = function (filter, tokenKeys) {\n    var _this = this;\n    var idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\n    var idTokens = [];\n    idTokenKeys.forEach(function (key) {\n      if (!_this.idTokenKeyMatchesFilter(key, __assign({\n        clientId: _this.clientId\n      }, filter))) {\n        return;\n      }\n      var idToken = _this.getIdTokenCredential(key);\n      if (idToken && _this.credentialMatchesFilter(idToken, filter)) {\n        idTokens.push(idToken);\n      }\n    });\n    return idTokens;\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   * @returns\r\n   */\n  CacheManager.prototype.idTokenKeyMatchesFilter = function (inputKey, filter) {\n    var key = inputKey.toLowerCase();\n    if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * Removes idToken from the cache\r\n   * @param key\r\n   */\n  CacheManager.prototype.removeIdToken = function (key) {\n    this.removeItem(key);\n  };\n  /**\r\n   * Removes refresh token from the cache\r\n   * @param key\r\n   */\n  CacheManager.prototype.removeRefreshToken = function (key) {\n    this.removeItem(key);\n  };\n  /**\r\n   * Retrieve AccessTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param scopes\r\n   * @param authScheme\r\n   */\n  CacheManager.prototype.getAccessToken = function (account, request, tokenKeys) {\n    var _this = this;\n    this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n    var scopes = ScopeSet.createSearchScopes(request.scopes);\n    var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\r\n     * Distinguish between Bearer and PoP/SSH token cache types\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n    var credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: credentialType,\n      clientId: this.clientId,\n      realm: account.tenantId,\n      target: scopes,\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash\n    };\n    var accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\n    var accessTokens = [];\n    accessTokenKeys.forEach(function (key) {\n      // Validate key\n      if (_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\n        var accessToken = _this.getAccessTokenCredential(key);\n        // Validate value\n        if (accessToken && _this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\n          accessTokens.push(accessToken);\n        }\n      }\n    });\n    var numAccessTokens = accessTokens.length;\n    if (numAccessTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\n      return null;\n    } else if (numAccessTokens > 1) {\n      this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\");\n      accessTokens.forEach(function (accessToken) {\n        _this.removeAccessToken(accessToken.generateCredentialKey());\n      });\n      return null;\n    }\n    this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\n    return accessTokens[0];\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   * @param keyMustContainAllScopes\r\n   * @returns\r\n   */\n  CacheManager.prototype.accessTokenKeyMatchesFilter = function (inputKey, filter, keyMustContainAllScopes) {\n    var key = inputKey.toLowerCase();\n    if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.target) {\n      var scopes = filter.target.asArray();\n      for (var i = 0; i < scopes.length; i++) {\n        if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\n          // When performing a cache lookup a missing scope would be a cache miss\n          return false;\n        } else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\n          // When performing a cache write, any token with a subset of requested scopes should be replaced\n          return true;\n        }\n      }\n    }\n    return true;\n  };\n  /**\r\n   * Gets all access tokens matching the filter\r\n   * @param filter\r\n   * @returns\r\n   */\n  CacheManager.prototype.getAccessTokensByFilter = function (filter) {\n    var _this = this;\n    var tokenKeys = this.getTokenKeys();\n    var accessTokens = [];\n    tokenKeys.accessToken.forEach(function (key) {\n      if (!_this.accessTokenKeyMatchesFilter(key, filter, true)) {\n        return;\n      }\n      var accessToken = _this.getAccessTokenCredential(key);\n      if (accessToken && _this.credentialMatchesFilter(accessToken, filter)) {\n        accessTokens.push(accessToken);\n      }\n    });\n    return accessTokens;\n  };\n  /**\r\n   * Helper to retrieve the appropriate refresh token from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param familyRT\r\n   */\n  CacheManager.prototype.getRefreshToken = function (account, familyRT, tokenKeys) {\n    var _this = this;\n    this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n    var id = familyRT ? THE_FAMILY_ID : undefined;\n    var refreshTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.REFRESH_TOKEN,\n      clientId: this.clientId,\n      familyId: id\n    };\n    var refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\n    var refreshTokens = [];\n    refreshTokenKeys.forEach(function (key) {\n      // Validate key\n      if (_this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n        var refreshToken = _this.getRefreshTokenCredential(key);\n        // Validate value\n        if (refreshToken && _this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\n          refreshTokens.push(refreshToken);\n        }\n      }\n    });\n    var numRefreshTokens = refreshTokens.length;\n    if (numRefreshTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\n      return null;\n    }\n    // address the else case after remove functions address environment aliases\n    this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\n    return refreshTokens[0];\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   */\n  CacheManager.prototype.refreshTokenKeyMatchesFilter = function (inputKey, filter) {\n    var key = inputKey.toLowerCase();\n    if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\n      return false;\n    }\n    // If familyId is used, clientId is not in the key\n    if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * Retrieve AppMetadataEntity from cache\r\n   */\n  CacheManager.prototype.readAppMetadataFromCache = function (environment) {\n    var appMetadataFilter = {\n      environment: environment,\n      clientId: this.clientId\n    };\n    var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n    var appMetadataEntries = Object.keys(appMetadata).map(function (key) {\n      return appMetadata[key];\n    });\n    var numAppMetadata = appMetadataEntries.length;\n    if (numAppMetadata < 1) {\n      return null;\n    } else if (numAppMetadata > 1) {\n      throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\n    }\n    return appMetadataEntries[0];\n  };\n  /**\r\n   * Return the family_id value associated  with FOCI\r\n   * @param environment\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.isAppMetadataFOCI = function (environment) {\n    var appMetadata = this.readAppMetadataFromCache(environment);\n    return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param value\r\n   * @param homeAccountId\r\n   */\n  CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\n    return !!(typeof entity.homeAccountId === \"string\" && homeAccountId === entity.homeAccountId);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param entity\r\n   * @param localAccountId\r\n   * @returns\r\n   */\n  CacheManager.prototype.matchLocalAccountId = function (entity, localAccountId) {\n    return !!(typeof entity.localAccountId === \"string\" && localAccountId === entity.localAccountId);\n  };\n  /**\r\n   * helper to match usernames\r\n   * @param entity\r\n   * @param username\r\n   * @returns\r\n   */\n  CacheManager.prototype.matchUsername = function (entity, username) {\n    return !!(typeof entity.username === \"string\" && username.toLowerCase() === entity.username.toLowerCase());\n  };\n  /**\r\n   * helper to match assertion\r\n   * @param value\r\n   * @param oboAssertion\r\n   */\n  CacheManager.prototype.matchUserAssertionHash = function (entity, userAssertionHash) {\n    return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n  };\n  /**\r\n   * helper to match environment\r\n   * @param value\r\n   * @param environment\r\n   */\n  CacheManager.prototype.matchEnvironment = function (entity, environment) {\n    var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n    if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * helper to match credential type\r\n   * @param entity\r\n   * @param credentialType\r\n   */\n  CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\n    return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n  };\n  /**\r\n   * helper to match client ids\r\n   * @param entity\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.matchClientId = function (entity, clientId) {\n    return !!(entity.clientId && clientId === entity.clientId);\n  };\n  /**\r\n   * helper to match family ids\r\n   * @param entity\r\n   * @param familyId\r\n   */\n  CacheManager.prototype.matchFamilyId = function (entity, familyId) {\n    return !!(entity.familyId && familyId === entity.familyId);\n  };\n  /**\r\n   * helper to match realm\r\n   * @param entity\r\n   * @param realm\r\n   */\n  CacheManager.prototype.matchRealm = function (entity, realm) {\n    return !!(entity.realm && realm === entity.realm);\n  };\n  /**\r\n   * helper to match nativeAccountId\r\n   * @param entity\r\n   * @param nativeAccountId\r\n   * @returns boolean indicating the match result\r\n   */\n  CacheManager.prototype.matchNativeAccountId = function (entity, nativeAccountId) {\n    return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n  };\n  /**\r\n   * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n   * @param entity\r\n   * @param target\r\n   */\n  CacheManager.prototype.matchTarget = function (entity, target) {\n    var isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n    if (isNotAccessTokenCredential || !entity.target) {\n      return false;\n    }\n    var entityScopeSet = ScopeSet.fromString(entity.target);\n    return entityScopeSet.containsScopeSet(target);\n  };\n  /**\r\n   * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n   * @param entity\r\n   * @param tokenType\r\n   */\n  CacheManager.prototype.matchTokenType = function (entity, tokenType) {\n    return !!(entity.tokenType && entity.tokenType === tokenType);\n  };\n  /**\r\n   * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n   * @param entity\r\n   * @param tokenType\r\n   */\n  CacheManager.prototype.matchKeyId = function (entity, keyId) {\n    return !!(entity.keyId && entity.keyId === keyId);\n  };\n  /**\r\n   * returns if a given cache entity is of the type appmetadata\r\n   * @param key\r\n   */\n  CacheManager.prototype.isAppMetadata = function (key) {\n    return key.indexOf(APP_METADATA) !== -1;\n  };\n  /**\r\n   * returns if a given cache entity is of the type authoritymetadata\r\n   * @param key\r\n   */\n  CacheManager.prototype.isAuthorityMetadata = function (key) {\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n  };\n  /**\r\n   * returns cache key used for cloud instance metadata\r\n   */\n  CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\n    return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\n  };\n  /**\r\n   * Helper to convert serialized data to object\r\n   * @param obj\r\n   * @param json\r\n   */\n  CacheManager.toObject = function (obj, json) {\n    for (var propertyName in json) {\n      obj[propertyName] = json[propertyName];\n    }\n    return obj;\n  };\n  return CacheManager;\n}();\nvar DefaultStorageClass = /** @class */function (_super) {\n  __extends(DefaultStorageClass, _super);\n  function DefaultStorageClass() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DefaultStorageClass.prototype.setAccount = function () {\n    var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAccount = function () {\n    var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAppMetadata = function () {\n    var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAppMetadata = function () {\n    var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setServerTelemetry = function () {\n    var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getServerTelemetry = function () {\n    var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setThrottlingCache = function () {\n    var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getThrottlingCache = function () {\n    var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.removeItem = function () {\n    var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.containsKey = function () {\n    var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getKeys = function () {\n    var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAccountKeys = function () {\n    var notImplErr = \"Storage interface - getAccountKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getTokenKeys = function () {\n    var notImplErr = \"Storage interface - getTokenKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  };\n  DefaultStorageClass.prototype.updateCredentialCacheKey = function () {\n    var notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  return DefaultStorageClass;\n}(CacheManager);\nexport { CacheManager, DefaultStorageClass };","map":{"version":3,"names":["CacheManager","clientId","cryptoImpl","logger","commonLogger","clone","name","version","prototype","getAllAccounts","_this","allAccountKeys","getAccountKeys","length","accountEntities","reduce","accounts","key","entity","getAccount","push","allAccounts","map","accountEntity","getAccountInfoFromEntity","getAccountInfoFilteredBy","accountFilter","getAccountsFilteredBy","accountInfo","getAccountInfo","idToken","getIdToken","secret","idTokenClaims","AuthToken","claims","saveCacheRecord","cacheRecord","ClientAuthError","createNullOrUndefinedCacheRecord","account","setAccount","setIdTokenCredential","accessToken","saveAccessToken","_a","sent","refreshToken","setRefreshTokenCredential","appMetadata","setAppMetadata","credential","accessTokenFilter","credentialType","environment","homeAccountId","realm","tokenType","requestedClaimsHash","tokenKeys","getTokenKeys","currentScopes","ScopeSet","fromString","target","removedAccessTokens","forEach","accessTokenKeyMatchesFilter","tokenEntity","getAccessTokenCredential","credentialMatchesFilter","tokenScopeSet","intersectingScopeSets","removeAccessToken","Promise","all","setAccessTokenCredential","matchingAccounts","cacheKey","isAccountKey","matchHomeAccountId","localAccountId","matchLocalAccountId","username","matchUsername","matchEnvironment","matchRealm","nativeAccountId","matchNativeAccountId","tenantId","split","Separators","CACHE_KEY_SEPARATOR","toLowerCase","includes","isCredentialKey","lowerCaseKey","indexOf","CredentialType","ID_TOKEN","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","clientIdValidation","familyIdValidation","THE_FAMILY_ID","filter","matchClientId","userAssertionHash","matchUserAssertionHash","matchCredentialType","familyId","matchFamilyId","matchTarget","matchTokenType","AuthenticationScheme","SSH","keyId","matchKeyId","getAppMetadataFilteredBy","getAppMetadataFilteredByInternal","allCacheKeys","getKeys","matchingAppMetadata","isAppMetadata","getAppMetadata","getAuthorityMetadataByAlias","host","getAuthorityMetadataKeys","matchedEntity","isAuthorityMetadata","getAuthorityMetadata","aliases","removeAllAccounts","removedAccounts","removeAccount","accountKey","createNoAccountFoundError","removeAccountContext","removeItem","allTokenKeys","accountId","generateAccountId","removedCredentials","removeIdToken","removeRefreshToken","POP","accessTokenWithAuthSchemeEntity","kid","removeTokenBindingKey","createBindingKeyNotRemovedError","removeAppMetadata","readCacheRecord","request","cachedAccount","readAccountFromCache","cachedIdToken","cachedAccessToken","getAccessToken","cachedRefreshToken","getRefreshToken","cachedAppMetadata","readAppMetadataFromCache","AccountEntity","generateAccountCacheKey","trace","idTokenFilter","idTokens","getIdTokensByFilter","numIdTokens","info","generateCredentialKey","idTokenKeys","idTokenKeyMatchesFilter","__assign","getIdTokenCredential","inputKey","scopes","createSearchScopes","authScheme","authenticationScheme","BEARER","sshKid","accessTokenKeys","accessTokens","numAccessTokens","keyMustContainAllScopes","asArray","i","getAccessTokensByFilter","familyRT","id","undefined","refreshTokenFilter","refreshTokenKeys","refreshTokens","refreshTokenKeyMatchesFilter","getRefreshTokenCredential","numRefreshTokens","appMetadataFilter","appMetadataEntries","Object","keys","numAppMetadata","createMultipleMatchingAppMetadataInCacheError","isAppMetadataFOCI","cloudMetadata","isNotAccessTokenCredential","entityScopeSet","containsScopeSet","APP_METADATA","AUTHORITY_METADATA_CONSTANTS","CACHE_KEY","generateAuthorityMetadataCacheKey","authority","toObject","obj","json","propertyName","DefaultStorageClass","_super","__extends","notImplErr","AuthError","createUnexpectedError","setServerTelemetry","getServerTelemetry","setAuthorityMetadata","setThrottlingCache","getThrottlingCache","containsKey","clear","updateCredentialCacheKey"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\cache\\CacheManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountFilter, CredentialFilter, ValidCredentialType, AppMetadataFilter, AppMetadataCache, TokenKeys } from \"./utils/CacheTypes\";\r\nimport { CacheRecord } from \"./entities/CacheRecord\";\r\nimport { CredentialType, APP_METADATA, THE_FAMILY_ID, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, Separators } from \"../utils/Constants\";\r\nimport { CredentialEntity } from \"./entities/CredentialEntity\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { AccountEntity } from \"./entities/AccountEntity\";\r\nimport { AccessTokenEntity } from \"./entities/AccessTokenEntity\";\r\nimport { IdTokenEntity } from \"./entities/IdTokenEntity\";\r\nimport { RefreshTokenEntity } from \"./entities/RefreshTokenEntity\";\r\nimport { AuthError } from \"../error/AuthError\";\r\nimport { ICacheManager } from \"./interface/ICacheManager\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport { AppMetadataEntity } from \"./entities/AppMetadataEntity\";\r\nimport { ServerTelemetryEntity } from \"./entities/ServerTelemetryEntity\";\r\nimport { ThrottlingEntity } from \"./entities/ThrottlingEntity\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\nimport { AuthorityMetadataEntity } from \"./entities/AuthorityMetadataEntity\";\r\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { name, version } from \"../packageMetadata\";\r\n\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\r\nexport abstract class CacheManager implements ICacheManager {\r\n    protected clientId: string;\r\n    protected cryptoImpl: ICrypto;\r\n    // Instance of logger for functions defined in the msal-common layer\r\n    private commonLogger: Logger;\r\n\r\n    constructor(clientId: string, cryptoImpl: ICrypto, logger: Logger) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n        this.commonLogger = logger.clone(name, version);\r\n    }\r\n\r\n    /**\r\n     * fetch the account entity from the platform cache\r\n     *  @param accountKey\r\n     */\r\n    abstract getAccount(accountKey: string): AccountEntity | null;\r\n\r\n    /**\r\n     * set account entity in the platform cache\r\n     * @param account\r\n     */\r\n    abstract setAccount(account: AccountEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param idTokenKey\r\n     */\r\n    abstract getIdTokenCredential(idTokenKey: string): IdTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param idToken\r\n     */\r\n    abstract setIdTokenCredential(idToken: IdTokenEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param accessTokenKey\r\n     */\r\n    abstract getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param accessToken\r\n     */\r\n    abstract setAccessTokenCredential(accessToken: AccessTokenEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param refreshTokenKey\r\n     */\r\n    abstract getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param refreshToken\r\n     */\r\n    abstract setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void;\r\n\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */\r\n    abstract getAppMetadata(appMetadataKey: string): AppMetadataEntity | null;\r\n\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */\r\n    abstract setAppMetadata(appMetadata: AppMetadataEntity): void;\r\n\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */\r\n    abstract getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null;\r\n\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */\r\n    abstract setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void;\r\n\r\n    /**\r\n     * fetch cloud discovery metadata entity from the platform cache\r\n     * @param key\r\n     */\r\n    abstract getAuthorityMetadata(key: string): AuthorityMetadataEntity | null;\r\n\r\n    /**\r\n     *\r\n     */\r\n    abstract getAuthorityMetadataKeys(): Array<string>;\r\n\r\n    /**\r\n     * set cloud discovery metadata entity to the platform cache\r\n     * @param key\r\n     * @param value\r\n     */\r\n    abstract setAuthorityMetadata(key: string, value: AuthorityMetadataEntity): void;\r\n\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */\r\n    abstract getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null;\r\n\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */\r\n    abstract setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void;\r\n\r\n    /**\r\n     * Function to remove an item from cache given its key.\r\n     * @param key\r\n     */\r\n    abstract removeItem(key: string): void;\r\n\r\n    /**\r\n     * Function which returns boolean whether cache contains a specific key.\r\n     * @param key\r\n     */\r\n    abstract containsKey(key: string, type?: string): boolean;\r\n\r\n    /**\r\n     * Function which retrieves all current keys from the cache.\r\n     */\r\n    abstract getKeys(): string[];\r\n\r\n    /**\r\n     * Function which retrieves all account keys from the cache\r\n     */\r\n    abstract getAccountKeys(): string[];\r\n\r\n    /**\r\n     * Function which retrieves all token keys from the cache\r\n     */\r\n    abstract getTokenKeys(): TokenKeys;\r\n\r\n    /**\r\n     * Function which clears cache.\r\n     */\r\n    abstract clear(): Promise<void>;\r\n\r\n    /**\r\n     * Function which updates an outdated credential cache key\r\n     */\r\n    abstract updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string;\r\n\r\n    /**\r\n     * Returns all accounts in cache\r\n     */\r\n    getAllAccounts(): AccountInfo[] {\r\n        const allAccountKeys = this.getAccountKeys();\r\n        if (allAccountKeys.length < 1) {\r\n            return [];\r\n        }\r\n\r\n        const accountEntities: AccountEntity[] = allAccountKeys.reduce((accounts: AccountEntity[], key: string) => {\r\n            const entity: AccountEntity | null = this.getAccount(key);\r\n\r\n            if (!entity) {\r\n                return accounts;\r\n            }\r\n            accounts.push(entity);\r\n            return accounts;\r\n        }, []);\r\n\r\n        if (accountEntities.length < 1) {\r\n            return [];\r\n        } else {\r\n            const allAccounts = accountEntities.map<AccountInfo>((accountEntity) => {\r\n                return this.getAccountInfoFromEntity(accountEntity);\r\n            });\r\n            return allAccounts;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets accountInfo object based on provided filters\r\n     */\r\n    getAccountInfoFilteredBy(accountFilter: AccountFilter): AccountInfo | null{\r\n        const allAccounts = this.getAccountsFilteredBy(accountFilter);\r\n        if (allAccounts.length > 0) {\r\n            return this.getAccountInfoFromEntity(allAccounts[0]);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private getAccountInfoFromEntity(accountEntity: AccountEntity): AccountInfo {\r\n        const accountInfo = accountEntity.getAccountInfo();\r\n        const idToken = this.getIdToken(accountInfo);\r\n        if (idToken) {\r\n            accountInfo.idToken = idToken.secret;\r\n            accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\r\n        }\r\n        return accountInfo;\r\n    }\r\n\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord\r\n     */\r\n    async saveCacheRecord(cacheRecord: CacheRecord): Promise<void> {\r\n        if (!cacheRecord) {\r\n            throw ClientAuthError.createNullOrUndefinedCacheRecord();\r\n        }\r\n\r\n        if (!!cacheRecord.account) {\r\n            this.setAccount(cacheRecord.account);\r\n        }\r\n\r\n        if (!!cacheRecord.idToken) {\r\n            this.setIdTokenCredential(cacheRecord.idToken);\r\n        }\r\n\r\n        if (!!cacheRecord.accessToken) {\r\n            await this.saveAccessToken(cacheRecord.accessToken);\r\n        }\r\n\r\n        if (!!cacheRecord.refreshToken) {\r\n            this.setRefreshTokenCredential(cacheRecord.refreshToken);\r\n        }\r\n\r\n        if (!!cacheRecord.appMetadata) {\r\n            this.setAppMetadata(cacheRecord.appMetadata);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    private async saveAccessToken(credential: AccessTokenEntity): Promise<void> {\r\n        const accessTokenFilter: CredentialFilter = {\r\n            clientId: credential.clientId,\r\n            credentialType: credential.credentialType,\r\n            environment: credential.environment,\r\n            homeAccountId: credential.homeAccountId,\r\n            realm: credential.realm,\r\n            tokenType: credential.tokenType,\r\n            requestedClaimsHash: credential.requestedClaimsHash\r\n        };\r\n\r\n        const tokenKeys = this.getTokenKeys();\r\n        const currentScopes = ScopeSet.fromString(credential.target);\r\n\r\n        const removedAccessTokens: Array<Promise<void>> = [];\r\n        tokenKeys.accessToken.forEach((key) => {\r\n            if(!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\r\n                return;\r\n            }\r\n            \r\n            const tokenEntity = this.getAccessTokenCredential(key);\r\n\r\n            if (tokenEntity && this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\r\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                    removedAccessTokens.push(this.removeAccessToken(key));\r\n                }\r\n            }\r\n        });\r\n        await Promise.all(removedAccessTokens);\r\n        this.setAccessTokenCredential(credential);\r\n    }\r\n\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    getAccountsFilteredBy(accountFilter: AccountFilter): AccountEntity[] {\r\n        const allAccountKeys = this.getAccountKeys();\r\n        const matchingAccounts: AccountEntity[] = [];\r\n\r\n        allAccountKeys.forEach((cacheKey) => {\r\n            if (!this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.realm)) {\r\n                // Don't parse value if the key doesn't match the account filters\r\n                return;\r\n            }\r\n\r\n            const entity: AccountEntity | null = this.getAccount(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (!!accountFilter.homeAccountId && !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\r\n                return;\r\n            }\r\n\r\n            if (!!accountFilter.localAccountId && !this.matchLocalAccountId(entity, accountFilter.localAccountId)) {\r\n                return;\r\n            }\r\n\r\n            if (!!accountFilter.username && !this.matchUsername(entity, accountFilter.username)) {\r\n                return;\r\n            }\r\n\r\n            if (!!accountFilter.environment && !this.matchEnvironment(entity, accountFilter.environment)) {\r\n                return;\r\n            }\r\n\r\n            if (!!accountFilter.realm && !this.matchRealm(entity, accountFilter.realm)) {\r\n                return;\r\n            }\r\n\r\n            if (!!accountFilter.nativeAccountId && !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\r\n                return;\r\n            }\r\n\r\n            matchingAccounts.push(entity);\r\n        });\r\n\r\n        return matchingAccounts;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n     * @param key \r\n     * @param homeAccountId \r\n     * @param tenantId \r\n     * @returns \r\n     */\r\n    isAccountKey(key: string, homeAccountId?: string, tenantId?: string): boolean {\r\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\r\n            // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\r\n            return false;\r\n        }\r\n\r\n        if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\r\n            return false;\r\n        }\r\n\r\n        if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\r\n            return false;\r\n        }\r\n\r\n        // Do not check environment as aliasing can cause false negatives\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given key matches our credential key schema.\r\n     * @param key \r\n     */\r\n    isCredentialKey(key: string): boolean {\r\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\r\n            // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\r\n            return false;\r\n        }\r\n\r\n        const lowerCaseKey = key.toLowerCase();\r\n        // Credential keys must indicate what credential type they represent\r\n        if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) === -1\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\r\n            // Refresh tokens must contain the client id or family id\r\n            const clientIdValidation = `${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${this.clientId}${Separators.CACHE_KEY_SEPARATOR}`;\r\n            const familyIdValidation = `${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${THE_FAMILY_ID}${Separators.CACHE_KEY_SEPARATOR}`;\r\n            if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\r\n                return false;\r\n            }\r\n        } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\r\n            // Tokens must contain the clientId\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity \r\n     * @param filter \r\n     * @returns \r\n     */\r\n    credentialMatchesFilter(entity: ValidCredentialType, filter: CredentialFilter): boolean {\r\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\r\n            return false;\r\n        }\r\n\r\n        if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\r\n            return false;\r\n        }\r\n\r\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */\r\n        if ((typeof filter.homeAccountId === \"string\") && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\r\n            return false;\r\n        }\r\n\r\n        if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\r\n            return false;\r\n        }\r\n\r\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\r\n            return false;\r\n        }\r\n\r\n        if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\r\n            return false;\r\n        }\r\n\r\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\r\n            return false;\r\n        }\r\n\r\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */\r\n        if (!!filter.target && !this.matchTarget(entity, filter.target)) {\r\n            return false;\r\n        }\r\n\r\n        // If request OR cached entity has requested Claims Hash, check if they match\r\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\r\n            // Don't match if either is undefined or they are different\r\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Access Token with Auth Scheme specific matching\r\n        if (entity.credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\r\n            if(!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\r\n                return false;\r\n            }\r\n\r\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\r\n            if (filter.tokenType === AuthenticationScheme.SSH) {\r\n                if(filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    getAppMetadataFilteredBy(filter: AppMetadataFilter): AppMetadataCache {\r\n        return this.getAppMetadataFilteredByInternal(\r\n            filter.environment,\r\n            filter.clientId,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Support function to help match appMetadata\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    private getAppMetadataFilteredByInternal(\r\n        environment?: string,\r\n        clientId?: string\r\n    ): AppMetadataCache {\r\n\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingAppMetadata: AppMetadataCache = {};\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n\r\n            // Attempt retrieval\r\n            const entity = this.getAppMetadata(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n\r\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n\r\n            matchingAppMetadata[cacheKey] = entity;\r\n\r\n        });\r\n\r\n        return matchingAppMetadata;\r\n    }\r\n\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    getAuthorityMetadataByAlias(host: string): AuthorityMetadataEntity | null {\r\n        const allCacheKeys = this.getAuthorityMetadataKeys();\r\n        let matchedEntity = null;\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\r\n                return;\r\n            }\r\n\r\n            // Attempt retrieval\r\n            const entity = this.getAuthorityMetadata(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n\r\n            matchedEntity = entity;\r\n\r\n        });\r\n\r\n        return matchedEntity;\r\n    }\r\n\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    async removeAllAccounts(): Promise<void> {\r\n        const allAccountKeys = this.getAccountKeys();\r\n        const removedAccounts: Array<Promise<void>> = [];\r\n\r\n        allAccountKeys.forEach((cacheKey) => {\r\n            removedAccounts.push(this.removeAccount(cacheKey));\r\n        });\r\n\r\n        await Promise.all(removedAccounts);\r\n    }\r\n\r\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */\r\n    async removeAccount(accountKey: string): Promise<void> {\r\n        const account = this.getAccount(accountKey);\r\n        if (!account) {\r\n            throw ClientAuthError.createNoAccountFoundError();\r\n        }\r\n        await this.removeAccountContext(account);\r\n        this.removeItem(accountKey);\r\n    }\r\n\r\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */\r\n    async removeAccountContext(account: AccountEntity): Promise<void> {\r\n        const allTokenKeys = this.getTokenKeys();\r\n        const accountId = account.generateAccountId();\r\n        const removedCredentials: Array<Promise<void>> = [];\r\n\r\n        allTokenKeys.idToken.forEach((key) => {\r\n            if (key.indexOf(accountId) === 0) {\r\n                this.removeIdToken(key);\r\n            }\r\n        });\r\n\r\n        allTokenKeys.accessToken.forEach((key) => {\r\n            if (key.indexOf(accountId) === 0) {\r\n                removedCredentials.push(this.removeAccessToken(key));\r\n            }\r\n        });\r\n\r\n        allTokenKeys.refreshToken.forEach((key) => {\r\n            if (key.indexOf(accountId) === 0) {\r\n                this.removeRefreshToken(key);\r\n            }\r\n        });\r\n\r\n        await Promise.all(removedCredentials);\r\n    }\r\n\r\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */\r\n    async removeAccessToken(key: string): Promise<void> {\r\n        const credential = this.getAccessTokenCredential(key);\r\n        if (!credential) {\r\n            return;\r\n        }\r\n\r\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\r\n        if (credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) {\r\n            if(credential.tokenType === AuthenticationScheme.POP) {\r\n                const accessTokenWithAuthSchemeEntity = credential as AccessTokenEntity;\r\n                const kid = accessTokenWithAuthSchemeEntity.keyId;\r\n\r\n                if (kid) {\r\n                    try {\r\n                        await this.cryptoImpl.removeTokenBindingKey(kid);\r\n                    } catch (error) {\r\n                        throw ClientAuthError.createBindingKeyNotRemovedError();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.removeItem(key);\r\n    }\r\n\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    removeAppMetadata(): boolean {\r\n        const allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            if (this.isAppMetadata(cacheKey)) {\r\n                this.removeItem(cacheKey);\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the cached credentials into a cacherecord\r\n     * @param account\r\n     * @param clientId\r\n     * @param scopes\r\n     * @param environment\r\n     * @param authScheme\r\n     */\r\n    readCacheRecord(account: AccountInfo, request: BaseAuthRequest, environment: string): CacheRecord {\r\n        const tokenKeys = this.getTokenKeys();\r\n        const cachedAccount = this.readAccountFromCache(account);\r\n        const cachedIdToken = this.getIdToken(account, tokenKeys);\r\n        const cachedAccessToken = this.getAccessToken(account, request, tokenKeys);\r\n        const cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys);\r\n        const cachedAppMetadata = this.readAppMetadataFromCache(environment);\r\n\r\n        if (cachedAccount && cachedIdToken) {\r\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\r\n        }\r\n\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */\r\n    readAccountFromCache(account: AccountInfo): AccountEntity | null {\r\n        const accountKey: string = AccountEntity.generateAccountCacheKey(account);\r\n        return this.getAccount(accountKey);\r\n    }\r\n\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param inputRealm\r\n     */\r\n    getIdToken(account: AccountInfo, tokenKeys?: TokenKeys): IdTokenEntity | null {\r\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\r\n        const idTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.clientId,\r\n            realm: account.tenantId,\r\n        };\r\n\r\n        const idTokens: IdTokenEntity[] = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\r\n        const numIdTokens = idTokens.length;\r\n\r\n        if (numIdTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\r\n            return null;\r\n        } else if (numIdTokens > 1) {\r\n            this.commonLogger.info(\r\n                \"CacheManager:getIdToken - Multiple id tokens found, clearing them\"\r\n            );\r\n            idTokens.forEach((idToken) => {\r\n                this.removeIdToken(idToken.generateCredentialKey());\r\n            });\r\n            return null;\r\n        }\r\n\r\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning id token\");\r\n        return idTokens[0];\r\n    }\r\n\r\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter \r\n     * @returns \r\n     */\r\n    getIdTokensByFilter(filter: CredentialFilter, tokenKeys?: TokenKeys): IdTokenEntity[] {\r\n        const idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\r\n\r\n        const idTokens: IdTokenEntity[] = [];\r\n        idTokenKeys.forEach((key) => {\r\n            if (!this.idTokenKeyMatchesFilter(key, {clientId: this.clientId, ...filter})) {\r\n                return;\r\n            }\r\n\r\n            const idToken = this.getIdTokenCredential(key);\r\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\r\n                idTokens.push(idToken);\r\n            }\r\n        });\r\n\r\n        return idTokens;\r\n    }\r\n\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key \r\n     * @param filter\r\n     * @returns \r\n     */\r\n    idTokenKeyMatchesFilter(inputKey: string, filter: CredentialFilter): boolean {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key \r\n     */\r\n    removeIdToken(key: string): void {\r\n        this.removeItem(key);\r\n    }\r\n\r\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key \r\n     */\r\n    removeRefreshToken(key: string): void {\r\n        this.removeItem(key);\r\n    }\r\n\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param scopes\r\n     * @param authScheme\r\n     */\r\n    getAccessToken(account: AccountInfo, request: BaseAuthRequest, tokenKeys?: TokenKeys): AccessTokenEntity | null {\r\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\");\r\n        const scopes =  ScopeSet.createSearchScopes(request.scopes);\r\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        const credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\r\n\r\n        const accessTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId: this.clientId,\r\n            realm: account.tenantId,\r\n            target: scopes,\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n        };\r\n\r\n        const accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\r\n        const accessTokens: AccessTokenEntity[] = [];\r\n\r\n        accessTokenKeys.forEach((key) => {\r\n            // Validate key\r\n            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\r\n                const accessToken = this.getAccessTokenCredential(key);\r\n\r\n                // Validate value\r\n                if (accessToken && this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\r\n                    accessTokens.push(accessToken);\r\n                }\r\n            }\r\n        });\r\n\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\r\n            return null;\r\n        } else if (numAccessTokens > 1) {\r\n            this.commonLogger.info(\r\n                \"CacheManager:getAccessToken - Multiple access tokens found, clearing them\"\r\n            );\r\n            accessTokens.forEach((accessToken) => {\r\n                this.removeAccessToken(accessToken.generateCredentialKey());\r\n            });\r\n            return null;\r\n        }\r\n\r\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\r\n        return accessTokens[0];\r\n    }\r\n\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key \r\n     * @param filter \r\n     * @param keyMustContainAllScopes \r\n     * @returns \r\n     */\r\n    accessTokenKeyMatchesFilter(inputKey: string, filter: CredentialFilter, keyMustContainAllScopes: boolean): boolean {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (filter.target) {\r\n            const scopes = filter.target.asArray();\r\n            for (let i = 0; i < scopes.length; i++) {\r\n                if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache lookup a missing scope would be a cache miss\r\n                    return false;\r\n                } else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter \r\n     * @returns \r\n     */\r\n    getAccessTokensByFilter(filter: CredentialFilter): AccessTokenEntity[] {\r\n        const tokenKeys = this.getTokenKeys();\r\n\r\n        const accessTokens: AccessTokenEntity[] = [];\r\n        tokenKeys.accessToken.forEach((key) => {\r\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\r\n                return;\r\n            }\r\n\r\n            const accessToken = this.getAccessTokenCredential(key);\r\n            if (accessToken && this.credentialMatchesFilter(accessToken, filter)) {\r\n                accessTokens.push(accessToken);\r\n            }\r\n        });\r\n\r\n        return accessTokens;\r\n    }\r\n\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param familyRT\r\n     */\r\n    getRefreshToken(account: AccountInfo, familyRT: boolean, tokenKeys?: TokenKeys): RefreshTokenEntity | null {\r\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\r\n        const id = familyRT ? THE_FAMILY_ID : undefined;\r\n        const refreshTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.REFRESH_TOKEN,\r\n            clientId: this.clientId,\r\n            familyId: id,\r\n        };\r\n\r\n        const refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\r\n        const refreshTokens: RefreshTokenEntity[] = [];\r\n\r\n        refreshTokenKeys.forEach((key) => {\r\n            // Validate key\r\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\r\n                const refreshToken = this.getRefreshTokenCredential(key);\r\n                // Validate value\r\n                if (refreshToken && this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\r\n                    refreshTokens.push(refreshToken);\r\n                }\r\n            }\r\n        });\r\n\r\n        const numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n\r\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\r\n        return refreshTokens[0] as RefreshTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */\r\n    refreshTokenKeyMatchesFilter(inputKey: string, filter: CredentialFilter): boolean {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        // If familyId is used, clientId is not in the key\r\n        if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    readAppMetadataFromCache(environment: string): AppMetadataEntity | null {\r\n        const appMetadataFilter: AppMetadataFilter = {\r\n            environment,\r\n            clientId: this.clientId,\r\n        };\r\n\r\n        const appMetadata: AppMetadataCache = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        const appMetadataEntries: AppMetadataEntity[] = Object.keys(appMetadata).map((key) => appMetadata[key]);\r\n\r\n        const numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        } else if (numAppMetadata > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\r\n        }\r\n\r\n        return appMetadataEntries[0] as AppMetadataEntity;\r\n    }\r\n\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    isAppMetadataFOCI(environment: string): boolean {\r\n        const appMetadata = this.readAppMetadataFromCache(environment);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    }\r\n\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    private matchHomeAccountId(entity: AccountEntity | CredentialEntity, homeAccountId: string): boolean {\r\n        return !!((typeof entity.homeAccountId === \"string\") && (homeAccountId === entity.homeAccountId));\r\n    }\r\n\r\n    /**\r\n     * helper to match account ids\r\n     * @param entity \r\n     * @param localAccountId \r\n     * @returns \r\n     */\r\n    private matchLocalAccountId(entity: AccountEntity, localAccountId: string): boolean {\r\n        return !!((typeof entity.localAccountId === \"string\") && (localAccountId === entity.localAccountId));\r\n    }\r\n\r\n    /**\r\n     * helper to match usernames\r\n     * @param entity \r\n     * @param username \r\n     * @returns \r\n     */\r\n    private matchUsername(entity: AccountEntity, username: string): boolean {\r\n        return !!((typeof entity.username === \"string\") && (username.toLowerCase() === entity.username.toLowerCase()));\r\n    }\r\n\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    private matchUserAssertionHash(entity: CredentialEntity, userAssertionHash: string): boolean {\r\n        return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\r\n    }\r\n\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    private matchEnvironment(entity: AccountEntity | CredentialEntity | AppMetadataEntity, environment: string): boolean {\r\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    private matchCredentialType(entity: CredentialEntity, credentialType: string): boolean {\r\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    private matchClientId(entity: CredentialEntity | AppMetadataEntity, clientId: string): boolean {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    }\r\n\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    private matchFamilyId(entity: CredentialEntity | AppMetadataEntity, familyId: string): boolean {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    }\r\n\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    private matchRealm(entity: AccountEntity | CredentialEntity, realm: string): boolean {\r\n        return !!(entity.realm && realm === entity.realm);\r\n    }\r\n\r\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */\r\n    private matchNativeAccountId(entity: AccountEntity, nativeAccountId: string): boolean {\r\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    private matchTarget(entity: CredentialEntity, target: ScopeSet): boolean {\r\n        const isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\r\n\r\n        if ( isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n\r\n        const entityScopeSet: ScopeSet = ScopeSet.fromString(entity.target);\r\n\r\n        return entityScopeSet.containsScopeSet(target);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    private matchTokenType(entity: CredentialEntity, tokenType: AuthenticationScheme): boolean {\r\n        return !!(entity.tokenType && entity.tokenType === tokenType);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    private matchKeyId(entity: CredentialEntity, keyId: string): boolean {\r\n        return !!(entity.keyId && entity.keyId === keyId);\r\n    }\r\n\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    private isAppMetadata(key: string): boolean {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    }\r\n\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    protected isAuthorityMetadata(key: string): boolean {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    }\r\n\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    generateAuthorityMetadataCacheKey(authority: string): string {\r\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\r\n    }\r\n\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    static toObject<T>(obj: T, json: object): T {\r\n        for (const propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n\r\nexport class DefaultStorageClass extends CacheManager {\r\n    setAccount(): void {\r\n        const notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAccount(): AccountEntity {\r\n        const notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setIdTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getIdTokenCredential(): IdTokenEntity {\r\n        const notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAccessTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAccessTokenCredential(): AccessTokenEntity {\r\n        const notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setRefreshTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getRefreshTokenCredential(): RefreshTokenEntity {\r\n        const notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAppMetadata(): void {\r\n        const notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAppMetadata(): AppMetadataEntity {\r\n        const notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setServerTelemetry(): void {\r\n        const notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getServerTelemetry(): ServerTelemetryEntity {\r\n        const notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAuthorityMetadata(): void {\r\n        const notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAuthorityMetadata(): AuthorityMetadataEntity | null {\r\n        const notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAuthorityMetadataKeys(): Array<string> {\r\n        const notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setThrottlingCache(): void {\r\n        const notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getThrottlingCache(): ThrottlingEntity {\r\n        const notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    removeItem(): boolean {\r\n        const notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    containsKey(): boolean {\r\n        const notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getKeys(): string[] {\r\n        const notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAccountKeys(): string[] {\r\n        const notImplErr = \"Storage interface - getAccountKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getTokenKeys(): TokenKeys {\r\n        const notImplErr = \"Storage interface - getTokenKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    async clear(): Promise<void> {\r\n        const notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    updateCredentialCacheKey(): string {\r\n        const notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}