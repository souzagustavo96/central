{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { Separators, CacheAccountType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\nimport { ProtocolMode } from '../../authority/ProtocolMode.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      name: Full name for the account, including given name and family name\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n *      nativeAccountId: Account identifier on the native device\r\n * }\r\n */\nvar AccountEntity = /** @class */function () {\n  function AccountEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  AccountEntity.prototype.generateAccountId = function () {\n    var accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n  AccountEntity.prototype.generateAccountKey = function () {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  };\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n  AccountEntity.prototype.getAccountInfo = function () {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims,\n      nativeAccountId: this.nativeAccountId,\n      authorityType: this.authorityType\n    };\n  };\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n  AccountEntity.generateAccountCacheKey = function (accountInterface) {\n    var accountKey = [accountInterface.homeAccountId, accountInterface.environment || Constants.EMPTY_STRING, accountInterface.tenantId || Constants.EMPTY_STRING];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Build Account cache from account properties.\r\n   * @param accountDetails\r\n   * @param authority\r\n   */\n  AccountEntity.createAccount = function (accountDetails, authority) {\n    var account = new AccountEntity();\n    if (authority.authorityType === AuthorityType.Adfs) {\n      account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\n    } else if (authority.protocolMode === ProtocolMode.AAD) {\n      account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    } else {\n      account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    }\n    account.clientInfo = accountDetails.clientInfo;\n    account.homeAccountId = accountDetails.homeAccountId;\n    account.nativeAccountId = accountDetails.nativeAccountId;\n    var env = accountDetails.environment || authority && authority.getPreferredCache();\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    account.environment = env;\n    // non AAD scenarios can have empty realm\n    account.realm = accountDetails.idTokenClaims.tid || Constants.EMPTY_STRING;\n    account.idTokenClaims = accountDetails.idTokenClaims;\n    // How do you account for MSA CID here?\n    account.localAccountId = accountDetails.idTokenClaims.oid || accountDetails.idTokenClaims.sub || Constants.EMPTY_STRING;\n    /*\r\n     * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n     * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n     * policy is configured to return more than 1 email.\r\n     */\n    if (account.authorityType === CacheAccountType.MSSTS_ACCOUNT_TYPE) {\n      var preferredUsername = accountDetails.idTokenClaims.preferred_username;\n      var email = accountDetails.idTokenClaims.emails ? accountDetails.idTokenClaims.emails[0] : null;\n      account.username = preferredUsername || email || \"\";\n    } else {\n      account.username = accountDetails.idTokenClaims.upn || \"\";\n    }\n    account.name = accountDetails.idTokenClaims.name;\n    account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n    account.msGraphHost = accountDetails.msGraphHost;\n    return account;\n  };\n  /**\r\n   * Creates an account object from AccountInfo\r\n   * @param accountInfo\r\n   * @param cloudGraphHostName\r\n   * @param msGraphHost\r\n   * @returns AccountEntity\r\n   */\n  AccountEntity.createFromAccountInfo = function (accountInfo, cloudGraphHostName, msGraphHost) {\n    var account = new AccountEntity();\n    account.authorityType = accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = accountInfo.homeAccountId;\n    account.localAccountId = accountInfo.localAccountId;\n    account.nativeAccountId = accountInfo.nativeAccountId;\n    account.realm = accountInfo.tenantId;\n    account.environment = accountInfo.environment;\n    account.username = accountInfo.username;\n    account.name = accountInfo.name;\n    account.idTokenClaims = accountInfo.idTokenClaims;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  };\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n  AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n    var accountId = (idTokenClaims === null || idTokenClaims === void 0 ? void 0 : idTokenClaims.sub) ? idTokenClaims.sub : Constants.EMPTY_STRING;\n    // since ADFS does not have tid and does not set client_info\n    if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\n      return accountId;\n    }\n    // for cases where there is clientInfo\n    if (serverClientInfo) {\n      try {\n        var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n        if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n          return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\n        }\n      } catch (e) {}\n    }\n    // default to \"sub\" claim\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  AccountEntity.isAccountEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  };\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n  AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n    var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n    if (compareClaims) {\n      var accountAClaims = accountA.idTokenClaims || {};\n      var accountBClaims = accountB.idTokenClaims || {};\n      // issued at timestamp and nonce are expected to change each time a new id token is acquired\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n  };\n  return AccountEntity;\n}();\nexport { AccountEntity };","map":{"version":3,"names":["AccountEntity","prototype","generateAccountId","accountId","homeAccountId","environment","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountKey","generateAccountCacheKey","tenantId","realm","username","localAccountId","getAccountInfo","name","idTokenClaims","nativeAccountId","authorityType","accountInterface","accountKey","Constants","EMPTY_STRING","createAccount","accountDetails","authority","account","AuthorityType","Adfs","CacheAccountType","ADFS_ACCOUNT_TYPE","protocolMode","ProtocolMode","AAD","MSSTS_ACCOUNT_TYPE","GENERIC_ACCOUNT_TYPE","clientInfo","env","getPreferredCache","ClientAuthError","createInvalidCacheEnvironmentError","tid","oid","sub","preferredUsername","preferred_username","email","emails","upn","cloudGraphHostName","msGraphHost","createFromAccountInfo","accountInfo","generateHomeAccountId","serverClientInfo","authType","logger","cryptoObj","Dsts","buildClientInfo","StringUtils","isEmpty","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","isAccountEntity","entity","hasOwnProperty","accountInfoIsEqual","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\cache\\entities\\AccountEntity.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    Separators,\r\n    CacheAccountType,\r\n    Constants,\r\n} from \"../../utils/Constants\";\r\nimport { Authority } from \"../../authority/Authority\";\r\nimport { ICrypto } from \"../../crypto/ICrypto\";\r\nimport { buildClientInfo } from \"../../account/ClientInfo\";\r\nimport { StringUtils } from \"../../utils/StringUtils\";\r\nimport { AccountInfo } from \"../../account/AccountInfo\";\r\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\r\nimport { AuthorityType } from \"../../authority/AuthorityType\";\r\nimport { Logger } from \"../../logger/Logger\";\r\nimport { TokenClaims } from \"../../account/TokenClaims\";\r\nimport { ProtocolMode } from \"../../authority/ProtocolMode\";\r\n\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      name: Full name for the account, including given name and family name\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n *      nativeAccountId: Account identifier on the native device\r\n * }\r\n */\r\nexport class AccountEntity {\r\n    homeAccountId: string;\r\n    environment: string;\r\n    realm: string;\r\n    localAccountId: string;\r\n    username: string;\r\n    authorityType: string;\r\n    clientInfo?: string;\r\n    name?: string;\r\n    lastModificationTime?: string;\r\n    lastModificationApp?: string;\r\n    cloudGraphHostName?: string;\r\n    msGraphHost?: string;\r\n    idTokenClaims?: TokenClaims;\r\n    nativeAccountId?: string;\r\n\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    generateAccountId(): string {\r\n        const accountId: Array<string> = [this.homeAccountId, this.environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */\r\n    generateAccountKey(): string {\r\n        return AccountEntity.generateAccountCacheKey({\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    getAccountInfo(): AccountInfo {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            name: this.name,\r\n            idTokenClaims: this.idTokenClaims,\r\n            nativeAccountId: this.nativeAccountId,\r\n            authorityType: this.authorityType\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */\r\n    static generateAccountCacheKey(accountInterface: AccountInfo): string {\r\n        const accountKey = [\r\n            accountInterface.homeAccountId,\r\n            accountInterface.environment || Constants.EMPTY_STRING,\r\n            accountInterface.tenantId || Constants.EMPTY_STRING,\r\n        ];\r\n\r\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Build Account cache from account properties.\r\n     * @param accountDetails\r\n     * @param authority\r\n     */\r\n    static createAccount(\r\n        accountDetails: {\r\n            homeAccountId: string,\r\n            idTokenClaims: TokenClaims,\r\n            clientInfo?: string,\r\n            cloudGraphHostName?: string,\r\n            msGraphHost?: string,\r\n            environment?: string,\r\n            nativeAccountId?: string\r\n        },\r\n        authority: Authority\r\n    ): AccountEntity {\r\n        const account: AccountEntity = new AccountEntity();\r\n\r\n        if (authority.authorityType === AuthorityType.Adfs) {\r\n            account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\r\n        } else if (authority.protocolMode === ProtocolMode.AAD) {\r\n            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        } else {\r\n            account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        }\r\n\r\n        account.clientInfo = accountDetails.clientInfo;\r\n        account.homeAccountId = accountDetails.homeAccountId;\r\n        account.nativeAccountId = accountDetails.nativeAccountId;\r\n\r\n        const env = accountDetails.environment || (authority && authority.getPreferredCache());\r\n\r\n        if (!env) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = accountDetails.idTokenClaims.tid || Constants.EMPTY_STRING;\r\n\r\n        account.idTokenClaims = accountDetails.idTokenClaims;\r\n\r\n        // How do you account for MSA CID here?\r\n        account.localAccountId = accountDetails.idTokenClaims.oid ||  accountDetails.idTokenClaims.sub || Constants.EMPTY_STRING;\r\n\r\n        /*\r\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n         * In most cases it will contain a single email. This field should not be relied upon if a custom \r\n         * policy is configured to return more than 1 email.\r\n         */\r\n        if (account.authorityType === CacheAccountType.MSSTS_ACCOUNT_TYPE) {\r\n            const preferredUsername = accountDetails.idTokenClaims.preferred_username;\r\n            const email = (accountDetails.idTokenClaims.emails) ? accountDetails.idTokenClaims.emails[0] : null;\r\n                \r\n            account.username = preferredUsername || email || \"\";\r\n        } else {\r\n            account.username = accountDetails.idTokenClaims.upn || \"\";\r\n        }\r\n        account.name = accountDetails.idTokenClaims.name;\r\n\r\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\r\n        account.msGraphHost = accountDetails.msGraphHost;\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Creates an account object from AccountInfo\r\n     * @param accountInfo\r\n     * @param cloudGraphHostName\r\n     * @param msGraphHost\r\n     * @returns AccountEntity\r\n     */\r\n    static createFromAccountInfo(\r\n        accountInfo: AccountInfo,\r\n        cloudGraphHostName?: string,\r\n        msGraphHost?: string\r\n    ): AccountEntity {\r\n        const account: AccountEntity = new AccountEntity();\r\n\r\n        account.authorityType =\r\n            accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = accountInfo.homeAccountId;\r\n        account.localAccountId = accountInfo.localAccountId;\r\n        account.nativeAccountId = accountInfo.nativeAccountId;\r\n        \r\n        account.realm = accountInfo.tenantId;\r\n        account.environment = accountInfo.environment;\r\n\r\n        account.username = accountInfo.username;\r\n        account.name = accountInfo.name;\r\n        account.idTokenClaims = accountInfo.idTokenClaims;\r\n\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    static generateHomeAccountId(\r\n        serverClientInfo: string,\r\n        authType: AuthorityType,\r\n        logger: Logger,\r\n        cryptoObj: ICrypto,\r\n        idTokenClaims?: TokenClaims\r\n    ): string {\r\n\r\n        const accountId = idTokenClaims?.sub ? idTokenClaims.sub : Constants.EMPTY_STRING;\r\n\r\n        // since ADFS does not have tid and does not set client_info\r\n        if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\r\n            return accountId;\r\n        }\r\n\r\n        // for cases where there is clientInfo\r\n        if (serverClientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\r\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\r\n                    return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\r\n                }\r\n            } catch (e) {}\r\n        }\r\n\r\n        // default to \"sub\" claim\r\n        logger.verbose(\"No client info in response\");\r\n        return accountId;\r\n    }\r\n\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isAccountEntity(entity: object): boolean {\r\n\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    static accountInfoIsEqual(accountA: AccountInfo | null, accountB: AccountInfo | null, compareClaims?: boolean): boolean {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n\r\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            const accountAClaims = (accountA.idTokenClaims || {}) as TokenClaims;\r\n            const accountBClaims = (accountB.idTokenClaims || {}) as TokenClaims;\r\n\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\r\n            (accountAClaims.nonce === accountBClaims.nonce);\r\n        }\r\n\r\n        return (accountA.homeAccountId === accountB.homeAccountId) &&\r\n            (accountA.localAccountId === accountB.localAccountId) &&\r\n            (accountA.username === accountB.username) &&\r\n            (accountA.tenantId === accountB.tenantId) &&\r\n            (accountA.environment === accountB.environment) &&\r\n            (accountA.nativeAccountId === accountB.nativeAccountId) &&\r\n            claimsMatch;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}