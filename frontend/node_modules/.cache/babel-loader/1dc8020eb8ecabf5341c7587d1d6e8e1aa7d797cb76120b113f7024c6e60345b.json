{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { JoseHeaderError } from '../error/JoseHeaderError.js';\nimport { JsonTypes } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar JoseHeader = /** @class */function () {\n  function JoseHeader(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\r\n   * Builds SignedHttpRequest formatted JOSE Header from the\r\n   * JOSE Header options provided or previously set on the object and returns\r\n   * the stringified header object.\r\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n   * @param shrHeaderOptions\r\n   * @returns\r\n   */\n  JoseHeader.getShrHeaderString = function (shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw JoseHeaderError.createMissingKidError();\n    }\n    // Alg is required on the SHR header\n    if (!shrHeaderOptions.alg) {\n      throw JoseHeaderError.createMissingAlgError();\n    }\n    var shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonTypes.Pop,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  };\n  return JoseHeader;\n}();\nexport { JoseHeader };","map":{"version":3,"names":["JoseHeader","options","typ","alg","kid","getShrHeaderString","shrHeaderOptions","JoseHeaderError","createMissingKidError","createMissingAlgError","shrHeader","JsonTypes","Pop","JSON","stringify"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\crypto\\JoseHeader.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { JoseHeaderError } from \"../error/JoseHeaderError\";\r\nimport { JsonTypes } from \"../utils/Constants\";\r\n\r\nexport type JoseHeaderOptions = {\r\n    typ?: JsonTypes,\r\n    alg?: string,\r\n    kid?: string\r\n};\r\n\r\nexport class JoseHeader {\r\n    public typ?: JsonTypes;\r\n    public alg?: string;\r\n    public kid?: string;\r\n\r\n    constructor (options: JoseHeaderOptions) {\r\n        this.typ = options.typ;\r\n        this.alg = options.alg;\r\n        this.kid = options.kid;\r\n    }\r\n\r\n    /**\r\n     * Builds SignedHttpRequest formatted JOSE Header from the\r\n     * JOSE Header options provided or previously set on the object and returns\r\n     * the stringified header object.\r\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n     * @param shrHeaderOptions \r\n     * @returns \r\n     */\r\n    static getShrHeaderString(shrHeaderOptions: JoseHeaderOptions): string {\r\n        // KeyID is required on the SHR header\r\n        if (!shrHeaderOptions.kid) {\r\n            throw JoseHeaderError.createMissingKidError();\r\n        }\r\n\r\n        // Alg is required on the SHR header\r\n        if (!shrHeaderOptions.alg) {\r\n            throw JoseHeaderError.createMissingAlgError();\r\n        }\r\n\r\n        const shrHeader = new JoseHeader({\r\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\r\n            typ: shrHeaderOptions.typ || JsonTypes.Pop,\r\n            kid: shrHeaderOptions.kid,\r\n            alg: shrHeaderOptions.alg\r\n        });\r\n\r\n        return JSON.stringify(shrHeader);\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAAA;;;AAGG;AAWH,IAAAA,UAAA;EAKI,SAAAA,WAAaC,OAA0B;IACnC,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACC,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGF,OAAO,CAACE,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGH,OAAO,CAACG,GAAG;;EAG1B;;;;;;;AAOG;EACIJ,UAAkB,CAAAK,kBAAA,GAAzB,UAA0BC,gBAAmC;;IAEzD,IAAI,CAACA,gBAAgB,CAACF,GAAG,EAAE;MACvB,MAAMG,eAAe,CAACC,qBAAqB,EAAE;IAChD;;IAGD,IAAI,CAACF,gBAAgB,CAACH,GAAG,EAAE;MACvB,MAAMI,eAAe,CAACE,qBAAqB,EAAE;IAChD;IAED,IAAMC,SAAS,GAAG,IAAIV,UAAU,CAAC;;MAE7BE,GAAG,EAAEI,gBAAgB,CAACJ,GAAG,IAAIS,SAAS,CAACC,GAAG;MAC1CR,GAAG,EAAEE,gBAAgB,CAACF,GAAG;MACzBD,GAAG,EAAEG,gBAAgB,CAACH;IACzB,EAAC;IAEF,OAAOU,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC;GACnC;EACL,OAACV,UAAA;AAAD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}