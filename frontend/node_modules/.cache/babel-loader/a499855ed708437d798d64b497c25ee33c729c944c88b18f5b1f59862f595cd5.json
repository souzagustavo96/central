{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { DatabaseStorage } from './DatabaseStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */\nvar AsyncMemoryStorage = /** @class */function () {\n  function AsyncMemoryStorage(logger, storeName) {\n    this.inMemoryCache = new MemoryStorage();\n    this.indexedDBCache = new DatabaseStorage();\n    this.logger = logger;\n    this.storeName = storeName;\n  }\n  AsyncMemoryStorage.prototype.handleDatabaseAccessError = function (error) {\n    if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\n      this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n    } else {\n      throw error;\n    }\n  };\n  /**\r\n   * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n   * storage object if item isn't found in-memory.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var item, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            item = this.inMemoryCache.getItem(key);\n            if (!!item) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.getItem(key)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_1 = _a.sent();\n            this.handleDatabaseAccessError(e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, item];\n        }\n      });\n    });\n  };\n  /**\r\n   * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n   * storage object with the given key.\r\n   * @param key\r\n   * @param value\r\n   */\n  AsyncMemoryStorage.prototype.setItem = function (key, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.inMemoryCache.setItem(key, value);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.indexedDBCache.setItem(key, value)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_2 = _a.sent();\n            this.handleDatabaseAccessError(e_2);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.inMemoryCache.removeItem(key);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.indexedDBCache.removeItem(key)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_3 = _a.sent();\n            this.handleDatabaseAccessError(e_3);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\r\n   * asynchronous storage object.\r\n   */\n  AsyncMemoryStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cacheKeys, e_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cacheKeys = this.inMemoryCache.getKeys();\n            if (!(cacheKeys.length === 0)) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.getKeys()];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_4 = _a.sent();\n            this.handleDatabaseAccessError(e_4);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, cacheKeys];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns true or false if the given key is present in the cache.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var containsKey, e_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            containsKey = this.inMemoryCache.containsKey(key);\n            if (!!containsKey) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.containsKey(key)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_5 = _a.sent();\n            this.handleDatabaseAccessError(e_5);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, containsKey];\n        }\n      });\n    });\n  };\n  /**\r\n   * Clears in-memory Map\r\n   */\n  AsyncMemoryStorage.prototype.clearInMemory = function () {\n    // InMemory cache is a Map instance, clear is straightforward\n    this.logger.verbose(\"Deleting in-memory keystore \" + this.storeName);\n    this.inMemoryCache.clear();\n    this.logger.verbose(\"In-memory keystore \" + this.storeName + \" deleted\");\n  };\n  /**\r\n   * Tries to delete the IndexedDB database\r\n   * @returns\r\n   */\n  AsyncMemoryStorage.prototype.clearPersistent = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var dbDeleted, e_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            this.logger.verbose(\"Deleting persistent keystore\");\n            return [4 /*yield*/, this.indexedDBCache.deleteDatabase()];\n          case 1:\n            dbDeleted = _a.sent();\n            if (dbDeleted) {\n              this.logger.verbose(\"Persistent keystore deleted\");\n            }\n            return [2 /*return*/, dbDeleted];\n          case 2:\n            e_6 = _a.sent();\n            this.handleDatabaseAccessError(e_6);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return AsyncMemoryStorage;\n}();\nexport { AsyncMemoryStorage };","map":{"version":3,"names":["AsyncMemoryStorage","logger","storeName","inMemoryCache","MemoryStorage","indexedDBCache","DatabaseStorage","prototype","handleDatabaseAccessError","error","BrowserAuthError","errorCode","BrowserAuthErrorMessage","databaseUnavailable","code","getItem","key","item","verbose","_a","sent","e_1","setItem","value","e_2","removeItem","e_3","getKeys","cacheKeys","length","e_4","containsKey","e_5","clearInMemory","clear","clearPersistent","deleteDatabase","dbDeleted","e_6"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-browser\\src\\cache\\AsyncMemoryStorage.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"@azure/msal-common\";\r\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\r\nimport { DatabaseStorage } from \"./DatabaseStorage\";\r\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\r\nimport { MemoryStorage } from \"./MemoryStorage\";\r\n\r\n/**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */\r\nexport class AsyncMemoryStorage<T> implements IAsyncStorage<T> {\r\n    private inMemoryCache: MemoryStorage<T>;\r\n    private indexedDBCache: DatabaseStorage<T>;\r\n    private logger: Logger;\r\n    private storeName: string;\r\n\r\n    constructor(logger: Logger, storeName: string) {\r\n        this.inMemoryCache = new MemoryStorage<T>();\r\n        this.indexedDBCache = new DatabaseStorage<T>();\r\n        this.logger = logger;\r\n        this.storeName = storeName;\r\n    }\r\n\r\n    private handleDatabaseAccessError(error: unknown): void {\r\n        if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\r\n            this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\r\n        } else {\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n     * storage object if item isn't found in-memory.\r\n     * @param key \r\n     */\r\n    async getItem(key: string): Promise<T | null> {\r\n        const item = this.inMemoryCache.getItem(key);\r\n        if(!item) {\r\n            try {\r\n                this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\r\n                return await this.indexedDBCache.getItem(key);\r\n            } catch (e) {\r\n                this.handleDatabaseAccessError(e);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n     * storage object with the given key.\r\n     * @param key \r\n     * @param value \r\n     */\r\n    async setItem(key: string, value: T): Promise<void> {\r\n        this.inMemoryCache.setItem(key, value);\r\n        try {\r\n            await this.indexedDBCache.setItem(key, value);\r\n        } catch (e) {\r\n            this.handleDatabaseAccessError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n     * @param key \r\n     */\r\n    async removeItem(key: string): Promise<void> {\r\n        this.inMemoryCache.removeItem(key);\r\n        try {\r\n            await this.indexedDBCache.removeItem(key);\r\n        } catch (e) {\r\n            this.handleDatabaseAccessError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the \r\n     * asynchronous storage object.\r\n     */\r\n    async getKeys(): Promise<string[]> {\r\n        const cacheKeys = this.inMemoryCache.getKeys();\r\n        if (cacheKeys.length === 0) {\r\n            try {\r\n                this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\r\n                return await this.indexedDBCache.getKeys();\r\n            } catch (e) {\r\n                this.handleDatabaseAccessError(e);\r\n            }\r\n        }\r\n        return cacheKeys;\r\n    }\r\n\r\n    /**\r\n     * Returns true or false if the given key is present in the cache.\r\n     * @param key \r\n     */\r\n    async containsKey(key: string): Promise<boolean> {\r\n        const containsKey = this.inMemoryCache.containsKey(key);\r\n        if(!containsKey) {\r\n            try {\r\n                this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\r\n                return await this.indexedDBCache.containsKey(key);\r\n            } catch (e) {\r\n                this.handleDatabaseAccessError(e);\r\n            }\r\n        }\r\n        return containsKey;\r\n    }\r\n\r\n    /**\r\n     * Clears in-memory Map\r\n     */\r\n    clearInMemory(): void {\r\n        // InMemory cache is a Map instance, clear is straightforward\r\n        this.logger.verbose(`Deleting in-memory keystore ${this.storeName}`);\r\n        this.inMemoryCache.clear();\r\n        this.logger.verbose(`In-memory keystore ${this.storeName} deleted`);\r\n    }\r\n\r\n    /**\r\n     * Tries to delete the IndexedDB database\r\n     * @returns\r\n     */\r\n    async clearPersistent(): Promise<boolean> {\r\n        try {\r\n            this.logger.verbose(\"Deleting persistent keystore\");\r\n            const dbDeleted = await this.indexedDBCache.deleteDatabase();\r\n            if (dbDeleted) {\r\n                this.logger.verbose(\"Persistent keystore deleted\");\r\n            }\r\n            \r\n            return dbDeleted;\r\n        } catch (e) {\r\n            this.handleDatabaseAccessError(e);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}