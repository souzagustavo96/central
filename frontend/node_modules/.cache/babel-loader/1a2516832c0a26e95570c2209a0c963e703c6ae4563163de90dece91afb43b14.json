{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentFlowClient = /** @class */function (_super) {\n  __extends(SilentFlowClient, _super);\n  function SilentFlowClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n  SilentFlowClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, refreshTokenClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.acquireCachedToken(request)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            e_1 = _a.sent();\n            if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n              refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n              return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\n            } else {\n              throw e_1;\n            }\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n  SilentFlowClient.prototype.acquireCachedToken = function (request) {\n    var _a, _b, _c, _d, _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var environment, cacheRecord;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            // Cannot renew token if no request object is given.\n            if (!request) {\n              throw ClientConfigurationError.createEmptyTokenRequestError();\n            }\n            if (request.forceRefresh) {\n              // Must refresh due to present force_refresh flag.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (!this.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\n              // Must refresh due to presence of claims in request preventing cache lookup\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CLAIMS_REQUESTED_CACHE_SKIPPED);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n            // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n            if (!request.account) {\n              throw ClientAuthError.createNoAccountInSilentRequestError();\n            }\n            environment = request.authority || this.authority.getPreferredCache();\n            cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\n            if (!cacheRecord.accessToken) {\n              // Must refresh due to non-existent access_token.\n              (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Must refresh due to expired access_token.\n              (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n              // Must refresh due to the refresh_in value.\n              (_e = this.serverTelemetryManager) === null || _e === void 0 ? void 0 : _e.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n            return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\n          case 1:\n            return [2 /*return*/, _f.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n  SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, authTime;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (cacheRecord.idToken) {\n              idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n            }\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n              authTime = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.auth_time;\n              if (!authTime) {\n                throw ClientAuthError.createAuthTimeNotFoundError();\n              }\n              AuthToken.checkMaxAge(authTime, request.maxAge);\n            }\n            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return SilentFlowClient;\n}(BaseClient);\nexport { SilentFlowClient };","map":{"version":3,"names":["SilentFlowClient","_super","__extends","configuration","performanceClient","call","prototype","acquireToken","request","acquireCachedToken","_a","sent","e_1","ClientAuthError","errorCode","ClientAuthErrorMessage","tokenRefreshRequired","code","refreshTokenClient","RefreshTokenClient","config","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","forceRefresh","serverTelemetryManager","setCacheOutcome","CacheOutcome","FORCE_REFRESH","logger","info","createRefreshRequiredError","cacheOptions","claimsBasedCachingEnabled","StringUtils","isEmptyObj","claims","_b","CLAIMS_REQUESTED_CACHE_SKIPPED","account","createNoAccountInSilentRequestError","environment","authority","getPreferredCache","cacheRecord","cacheManager","readCacheRecord","accessToken","_c","NO_CACHED_ACCESS_TOKEN","TimeUtils","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","_d","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","_e","REFRESH_CACHED_ACCESS_TOKEN","incrementCacheHits","generateResultFromCacheRecord","_f","idToken","idTokenObj","AuthToken","secret","cryptoInterface","maxAge","authTime","auth_time","createAuthTimeNotFoundError","checkMaxAge","ResponseHandler","generateAuthenticationResult","cryptoUtils","BaseClient"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\client\\SilentFlowClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { RefreshTokenClient } from \"./RefreshTokenClient\";\r\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\r\nimport { CacheOutcome } from \"../utils/Constants\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\n\r\nexport class SilentFlowClient extends BaseClient {\r\n    \r\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\r\n        super(configuration,performanceClient);\r\n    }\r\n    \r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        try {\r\n            return await this.acquireCachedToken(request);\r\n        } catch (e) {\r\n            if (e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\r\n                const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\r\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    async acquireCachedToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n        }\r\n\r\n        if (request.forceRefresh) {\r\n            // Must refresh due to present force_refresh flag.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (!this.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\r\n            // Must refresh due to presence of claims in request preventing cache lookup\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CLAIMS_REQUESTED_CACHE_SKIPPED);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        }\r\n\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n        }\r\n\r\n        const environment = request.authority || this.authority.getPreferredCache();\r\n\r\n        const cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\r\n\r\n        if (!cacheRecord.accessToken) {\r\n            // Must refresh due to non-existent access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (\r\n            TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\r\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)\r\n        ) {\r\n            // Must refresh due to expired access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            this.logger.info(`SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\r\n            // Must refresh due to the refresh_in value.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        }\r\n\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n\r\n        return await this.generateResultFromCacheRecord(cacheRecord, request);\r\n    }\r\n\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    private async generateResultFromCacheRecord(cacheRecord: CacheRecord, request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        let idTokenObj: AuthToken | undefined;\r\n        if (cacheRecord.idToken) {\r\n            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\r\n        }\r\n\r\n        // token max_age check\r\n        if (request.maxAge || (request.maxAge === 0)) {\r\n            const authTime = idTokenObj?.claims.auth_time;\r\n            if (!authTime) {\r\n                throw ClientAuthError.createAuthTimeNotFoundError();\r\n            }\r\n\r\n            AuthToken.checkMaxAge(authTime, request.maxAge);\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            cacheRecord,\r\n            true,\r\n            request,\r\n            idTokenObj\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}