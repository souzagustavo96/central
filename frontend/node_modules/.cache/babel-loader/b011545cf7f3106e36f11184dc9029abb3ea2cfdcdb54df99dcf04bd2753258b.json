{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { PerformanceEvents, AuthError, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentRefreshClient = /** @class */function (_super) {\n  __extends(SilentRefreshClient, _super);\n  function SilentRefreshClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n  SilentRefreshClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, _a, acquireTokenMeasurement, serverTelemetryManager, refreshTokenClient;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n            _a = [__assign({}, request)];\n            return [4 /*yield*/, this.initializeBaseRequest(request, request.account)];\n          case 1:\n            silentRequest = __assign.apply(void 0, _a.concat([_b.sent()]));\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4 /*yield*/, this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n          case 2:\n            refreshTokenClient = _b.sent();\n            this.logger.verbose(\"Refresh token client created\");\n            // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: result.fromCache,\n                requestId: result.requestId\n              });\n              return result;\n            }).catch(function (e) {\n              if (e instanceof AuthError) {\n                e.setCorrelationId(_this.correlationId);\n              }\n              serverTelemetryManager.cacheFailedRequest(e);\n              acquireTokenMeasurement.endMeasurement({\n                errorCode: e.errorCode,\n                subErrorCode: e.subError,\n                success: false\n              });\n              throw e;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentRefreshClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n  SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Create auth module.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n          case 1:\n            clientConfig = _a.sent();\n            return [2 /*return*/, new RefreshTokenClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n  return SilentRefreshClient;\n}(StandardInteractionClient);\nexport { SilentRefreshClient };","map":{"version":3,"names":["SilentRefreshClient","_super","__extends","prototype","acquireToken","request","performanceClient","addQueueMeasurement","PerformanceEvents","SilentRefreshClientAcquireToken","correlationId","setPreQueueTime","InitializeBaseRequest","initializeBaseRequest","account","silentRequest","__assign","apply","_a","concat","_b","sent","acquireTokenMeasurement","startMeasurement","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","createRefreshTokenClient","authority","azureCloudOptions","refreshTokenClient","logger","verbose","RefreshTokenClientAcquireTokenByRefreshToken","acquireTokenByRefreshToken","then","result","endMeasurement","success","fromCache","requestId","catch","e","AuthError","setCorrelationId","_this","cacheFailedRequest","errorCode","subErrorCode","subError","logout","Promise","reject","BrowserAuthError","createSilentLogoutUnsupportedError","authorityUrl","StandardInteractionClientGetClientConfiguration","getClientConfiguration","clientConfig","RefreshTokenClient","StandardInteractionClient"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentRefreshClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { CommonSilentFlowRequest, AuthenticationResult, ServerTelemetryManager, RefreshTokenClient, AuthError, AzureCloudOptions, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { ApiId } from \"../utils/BrowserConstants\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\nexport class SilentRefreshClient extends StandardInteractionClient {\r\n    /**\r\n     * Exchanges the refresh token for new tokens\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\r\n        const silentRequest: CommonSilentFlowRequest = {\r\n            ...request,\r\n            ...await this.initializeBaseRequest(request, request.account)\r\n        };\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\r\n\r\n        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n        this.logger.verbose(\"Refresh token client created\");\r\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n        return refreshTokenClient.acquireTokenByRefreshToken(silentRequest)\r\n            .then((result: AuthenticationResult) => {\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    success: true,\r\n                    fromCache: result.fromCache,\r\n                    requestId: result.requestId\r\n                });\r\n\r\n                return result;\r\n            })\r\n            .catch((e: AuthError) => {\r\n                if (e instanceof AuthError) {\r\n                    (e as AuthError).setCorrelationId(this.correlationId);\r\n                }\r\n                serverTelemetryManager.cacheFailedRequest(e);\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    errorCode: e.errorCode,\r\n                    subErrorCode: e.subError,\r\n                    success: false\r\n                });\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Creates a Refresh Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createRefreshTokenClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<RefreshTokenClient> {\r\n        // Create auth module.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\r\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}