{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { ScopeSet } from './ScopeSet.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from './RequestValidator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RequestParameterBuilder = /** @class */function () {\n  function RequestParameterBuilder() {\n    this.parameters = new Map();\n  }\n  /**\r\n   * add response_type = code\r\n   */\n  RequestParameterBuilder.prototype.addResponseTypeCode = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_type = token id_token\r\n   */\n  RequestParameterBuilder.prototype.addResponseTypeForTokenAndIdToken = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.TOKEN_RESPONSE_TYPE + \" \" + Constants.ID_TOKEN_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_mode. defaults to query.\r\n   * @param responseMode\r\n   */\n  RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  };\n  /**\r\n   * Add flag to indicate STS should attempt to use WAM if available\r\n   */\n  RequestParameterBuilder.prototype.addNativeBroker = function () {\n    this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n  };\n  /**\r\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n   * @param scopeSet\r\n   * @param addOidcScopes\r\n   */\n  RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\n    if (addOidcScopes === void 0) {\n      addOidcScopes = true;\n    }\n    var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\n    var scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  };\n  /**\r\n   * add clientId\r\n   * @param clientId\r\n   */\n  RequestParameterBuilder.prototype.addClientId = function (clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  };\n  /**\r\n   * add redirect_uri\r\n   * @param redirectUri\r\n   */\n  RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add post logout redirectUri\r\n   * @param redirectUri\r\n   */\n  RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add id_token_hint to logout request\r\n   * @param idTokenHint\r\n   */\n  RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  };\n  /**\r\n   * add domain_hint\r\n   * @param domainHint\r\n   */\n  RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  };\n  /**\r\n   * add login_hint\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for account object\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\n  };\n  /**\r\n   * add sid\r\n   * @param sid\r\n   */\n  RequestParameterBuilder.prototype.addSid = function (sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  };\n  /**\r\n   * add claims\r\n   * @param claims\r\n   */\n  RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\n    var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  };\n  /**\r\n   * add correlationId\r\n   * @param correlationId\r\n   */\n  RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  };\n  /**\r\n   * add library info query params\r\n   * @param libraryInfo\r\n   */\n  RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    if (libraryInfo.os) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    }\n    if (libraryInfo.cpu) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  };\n  /**\r\n   * Add client telemetry parameters\r\n   * @param appTelemetry\r\n   */\n  RequestParameterBuilder.prototype.addApplicationTelemetry = function (appTelemetry) {\n    if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appName) {\n      this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n    }\n    if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appVersion) {\n      this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n    }\n  };\n  /**\r\n   * add prompt\r\n   * @param prompt\r\n   */\n  RequestParameterBuilder.prototype.addPrompt = function (prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\n  };\n  /**\r\n   * add state\r\n   * @param state\r\n   */\n  RequestParameterBuilder.prototype.addState = function (state) {\n    if (!StringUtils.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  };\n  /**\r\n   * add nonce\r\n   * @param nonce\r\n   */\n  RequestParameterBuilder.prototype.addNonce = function (nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  };\n  /**\r\n   * add code_challenge and code_challenge_method\r\n   * - throw if either of them are not passed\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n  RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    }\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n  RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n  RequestParameterBuilder.prototype.addDeviceCode = function (code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `refreshToken` passed by the user\r\n   * @param refreshToken\r\n   */\n  RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  };\n  /**\r\n   * add the `code_verifier` passed by the user to exchange for a token\r\n   * @param codeVerifier\r\n   */\n  RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  };\n  /**\r\n   * add client_secret\r\n   * @param clientSecret\r\n   */\n  RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  };\n  /**\r\n   * add clientAssertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n  RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\n    if (!StringUtils.isEmpty(clientAssertion)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  };\n  /**\r\n   * add clientAssertionType for confidential client flows\r\n   * @param clientAssertionType\r\n   */\n  RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\n    if (!StringUtils.isEmpty(clientAssertionType)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  };\n  /**\r\n   * add OBO assertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n  RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n  RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n  RequestParameterBuilder.prototype.addGrantType = function (grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  };\n  /**\r\n   * add client info\r\n   *\r\n   */\n  RequestParameterBuilder.prototype.addClientInfo = function () {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  };\n  /**\r\n   * add extraQueryParams\r\n   * @param eQParams\r\n   */\n  RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQParams) {\n    var _this = this;\n    var sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n    Object.keys(sanitizedEQParams).forEach(function (key) {\n      _this.parameters.set(key, eQParams[key]);\n    });\n  };\n  RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\n    var mergedClaims;\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidClaimsRequestError();\n      }\n    }\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      }\n      // Add xms_cc claim with provided clientCapabilities to access_token key\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n    return JSON.stringify(mergedClaims);\n  };\n  /**\r\n   * adds `username` for Password Grant flow\r\n   * @param username\r\n   */\n  RequestParameterBuilder.prototype.addUsername = function (username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  };\n  /**\r\n   * adds `password` for Password Grant flow\r\n   * @param password\r\n   */\n  RequestParameterBuilder.prototype.addPassword = function (password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  };\n  /**\r\n   * add pop_jwk to query params\r\n   * @param cnfString\r\n   */\n  RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\n    if (!StringUtils.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  };\n  /**\r\n   * add SSH JWK and key ID to query params\r\n   */\n  RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {\n    if (!StringUtils.isEmpty(sshJwkString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  };\n  /**\r\n   * add server telemetry fields\r\n   * @param serverTelemetryManager\r\n   */\n  RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  };\n  /**\r\n   * Adds parameter that indicates to the server that throttling is supported\r\n   */\n  RequestParameterBuilder.prototype.addThrottling = function () {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  };\n  /**\r\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n   */\n  RequestParameterBuilder.prototype.addLogoutHint = function (logoutHint) {\n    this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n  };\n  /**\r\n   * Utility to create a URL from the params map\r\n   */\n  RequestParameterBuilder.prototype.createQueryString = function () {\n    var queryParameterArray = new Array();\n    this.parameters.forEach(function (value, key) {\n      queryParameterArray.push(key + \"=\" + value);\n    });\n    return queryParameterArray.join(\"&\");\n  };\n  return RequestParameterBuilder;\n}();\nexport { RequestParameterBuilder };","map":{"version":3,"names":["RequestParameterBuilder","parameters","Map","prototype","addResponseTypeCode","set","AADServerParamKeys","RESPONSE_TYPE","encodeURIComponent","Constants","CODE_RESPONSE_TYPE","addResponseTypeForTokenAndIdToken","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","addResponseMode","responseMode","RESPONSE_MODE","ResponseMode","QUERY","addNativeBroker","NATIVE_BROKER","addScopes","scopes","addOidcScopes","requestScopes","__spreadArrays","OIDC_DEFAULT_SCOPES","scopeSet","ScopeSet","SCOPE","printScopes","addClientId","clientId","CLIENT_ID","addRedirectUri","redirectUri","RequestValidator","validateRedirectUri","REDIRECT_URI","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","addDomainHint","domainHint","SSOTypes","DOMAIN_HINT","addLoginHint","loginHint","LOGIN_HINT","addCcsUpn","HeaderNames","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","addClaims","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","addCorrelationId","correlationId","CLIENT_REQUEST_ID","addLibraryInfo","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","os","X_CLIENT_OS","cpu","X_CLIENT_CPU","addApplicationTelemetry","appTelemetry","appName","X_APP_NAME","appVersion","X_APP_VER","addPrompt","prompt","validatePrompt","PROMPT","addState","state","StringUtils","isEmpty","STATE","addNonce","nonce","NONCE","addCodeChallengeParams","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","ClientConfigurationError","createInvalidCodeChallengeParamsError","addAuthorizationCode","code","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","refreshToken","REFRESH_TOKEN","addCodeVerifier","codeVerifier","CODE_VERIFIER","addClientSecret","clientSecret","CLIENT_SECRET","addClientAssertion","clientAssertion","CLIENT_ASSERTION","addClientAssertionType","clientAssertionType","CLIENT_ASSERTION_TYPE","addOboAssertion","oboAssertion","OBO_ASSERTION","addRequestTokenUse","tokenUse","REQUESTED_TOKEN_USE","addGrantType","grantType","GRANT_TYPE","addClientInfo","CLIENT_INFO","addExtraQueryParameters","eQParams","_this","sanitizedEQParams","sanitizeEQParams","Object","keys","forEach","key","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","values","stringify","addUsername","username","PasswordGrantConstants","addPassword","password","addPopToken","cnfString","TOKEN_TYPE","AuthenticationScheme","POP","REQ_CNF","addSshJwk","sshJwkString","SSH","addServerTelemetry","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","addThrottling","X_MS_LIB_CAPABILITY","ThrottlingConstants","X_MS_LIB_CAPABILITY_VALUE","addLogoutHint","logoutHint","LOGOUT_HINT","createQueryString","queryParameterArray","Array","value","push","join"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\request\\RequestParameterBuilder.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AADServerParamKeys, Constants, ResponseMode, SSOTypes, CLIENT_INFO, AuthenticationScheme, ClaimsRequestKeys, PasswordGrantConstants, OIDC_DEFAULT_SCOPES, ThrottlingConstants, HeaderNames} from \"../utils/Constants\";\r\nimport { ScopeSet } from \"./ScopeSet\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { StringDict } from \"../utils/MsalTypes\";\r\nimport { RequestValidator } from \"./RequestValidator\";\r\nimport { ApplicationTelemetry, LibraryInfo } from \"../config/ClientConfiguration\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\r\nimport { ClientInfo } from \"../account/ClientInfo\";\r\n\r\nexport class RequestParameterBuilder {\r\n\r\n    private parameters: Map<string, string>;\r\n\r\n    constructor() {\r\n        this.parameters = new Map<string, string>();\r\n    }\r\n\r\n    /**\r\n     * add response_type = code\r\n     */\r\n    addResponseTypeCode(): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add response_type = token id_token\r\n     */\r\n    addResponseTypeForTokenAndIdToken(): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */\r\n    addResponseMode(responseMode?: ResponseMode): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_MODE,\r\n            encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Add flag to indicate STS should attempt to use WAM if available\r\n     */\r\n    addNativeBroker(): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.NATIVE_BROKER,\r\n            encodeURIComponent(\"1\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */\r\n    addScopes(scopes: string[], addOidcScopes: boolean = true): void {\r\n        const requestScopes = addOidcScopes ? [...scopes || [], ...OIDC_DEFAULT_SCOPES] : scopes || [];\r\n        const scopeSet = new ScopeSet(requestScopes);\r\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\r\n    }\r\n\r\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */\r\n    addClientId(clientId: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\r\n    }\r\n\r\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */\r\n    addRedirectUri(redirectUri: string): void {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\r\n    }\r\n\r\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */\r\n    addPostLogoutRedirectUri(redirectUri: string): void {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\r\n    }\r\n\r\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */\r\n    addIdTokenHint(idTokenHint: string): void {\r\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\r\n    }\r\n\r\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */\r\n    addDomainHint(domainHint: string): void {\r\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\r\n    }\r\n\r\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */\r\n    addLoginHint(loginHint: string): void {\r\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\r\n    }\r\n\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint\r\n     */\r\n    addCcsUpn(loginHint: string): void {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\r\n    }\r\n\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint\r\n     */\r\n    addCcsOid(clientInfo: ClientInfo): void {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\r\n    }\r\n\r\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */\r\n    addSid(sid: string): void {\r\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\r\n    }\r\n\r\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */\r\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\r\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n        RequestValidator.validateClaims(mergedClaims);\r\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\r\n    }\r\n\r\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */\r\n    addCorrelationId(correlationId: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\r\n    }\r\n\r\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */\r\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\r\n        // Telemetry Info\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\r\n        if (libraryInfo.os) {\r\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\r\n        }\r\n        if (libraryInfo.cpu) {\r\n            this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add client telemetry parameters\r\n     * @param appTelemetry\r\n     */\r\n    addApplicationTelemetry(appTelemetry: ApplicationTelemetry): void {\r\n        if (appTelemetry?.appName) {\r\n            this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\r\n        }\r\n\r\n        if (appTelemetry?.appVersion) {\r\n            this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */\r\n    addPrompt(prompt: string): void {\r\n        RequestValidator.validatePrompt(prompt);\r\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\r\n    }\r\n\r\n    /**\r\n     * add state\r\n     * @param state\r\n     */\r\n    addState(state: string): void {\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */\r\n    addNonce(nonce: string): void {\r\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\r\n    }\r\n\r\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    addCodeChallengeParams(\r\n        codeChallenge: string,\r\n        codeChallengeMethod: string\r\n    ): void {\r\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\r\n        if (codeChallenge && codeChallengeMethod) {\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\r\n        } else {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    addAuthorizationCode(code: string): void {\r\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\r\n    }\r\n\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    addDeviceCode(code: string): void {\r\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\r\n    }\r\n\r\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */\r\n    addRefreshToken(refreshToken: string): void {\r\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\r\n    }\r\n\r\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */\r\n    addCodeVerifier(codeVerifier: string): void {\r\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\r\n    }\r\n\r\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */\r\n    addClientSecret(clientSecret: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\r\n    }\r\n\r\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    addClientAssertion(clientAssertion: string): void {\r\n        if (!StringUtils.isEmpty(clientAssertion)) {\r\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */\r\n    addClientAssertionType(clientAssertionType: string): void {\r\n        if (!StringUtils.isEmpty(clientAssertionType)) {\r\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    addOboAssertion(oboAssertion: string): void {\r\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\r\n    }\r\n\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    addRequestTokenUse(tokenUse: string): void {\r\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\r\n    }\r\n\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    addGrantType(grantType: string): void {\r\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\r\n    }\r\n\r\n    /**\r\n     * add client info\r\n     *\r\n     */\r\n    addClientInfo(): void {\r\n        this.parameters.set(CLIENT_INFO, \"1\");\r\n    }\r\n\r\n    /**\r\n     * add extraQueryParams\r\n     * @param eQParams\r\n     */\r\n    addExtraQueryParameters(eQParams: StringDict): void {\r\n        const sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\r\n        Object.keys(sanitizedEQParams).forEach((key) => {\r\n            this.parameters.set(key, eQParams[key]);\r\n        });\r\n    }\r\n\r\n    addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string {\r\n        let mergedClaims: object;\r\n\r\n        // Parse provided claims into JSON object or initialize empty object\r\n        if (!claims) {\r\n            mergedClaims = {};\r\n        } else {\r\n            try {\r\n                mergedClaims = JSON.parse(claims);\r\n            } catch(e) {\r\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n            }\r\n        }\r\n\r\n        if (clientCapabilities && clientCapabilities.length > 0) {\r\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)){\r\n                // Add access_token key to claims object\r\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n            }\r\n\r\n            // Add xms_cc claim with provided clientCapabilities to access_token key\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\r\n                values: clientCapabilities\r\n            };\r\n        }\r\n\r\n        return JSON.stringify(mergedClaims);\r\n    }\r\n\r\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */\r\n    addUsername(username: string): void {\r\n        this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\r\n    }\r\n\r\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */\r\n    addPassword(password: string): void {\r\n        this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\r\n    }\r\n\r\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */\r\n    addPopToken(cnfString: string): void {\r\n        if (!StringUtils.isEmpty(cnfString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add SSH JWK and key ID to query params\r\n     */\r\n    addSshJwk(sshJwkString: string): void {\r\n        if(!StringUtils.isEmpty(sshJwkString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager\r\n     */\r\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n    }\r\n\r\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */\r\n    addThrottling(): void {\r\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n    }\r\n\r\n    /**\r\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n     */\r\n    addLogoutHint(logoutHint: string): void {\r\n        this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\r\n    }\r\n\r\n    /**\r\n     * Utility to create a URL from the params map\r\n     */\r\n    createQueryString(): string {\r\n        const queryParameterArray: Array<string> = new Array<string>();\r\n\r\n        this.parameters.forEach((value, key) => {\r\n            queryParameterArray.push(`${key}=${value}`);\r\n        });\r\n\r\n        return queryParameterArray.join(\"&\");\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}