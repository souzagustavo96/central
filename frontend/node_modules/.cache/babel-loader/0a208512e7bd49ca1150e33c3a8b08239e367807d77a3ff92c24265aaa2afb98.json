{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AuthenticationScheme, CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * On-Behalf-Of client\r\n */\nvar OnBehalfOfClient = /** @class */function (_super) {\n  __extends(OnBehalfOfClient, _super);\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            // generate the user_assertion_hash for OBOAssertion\n            _a = this;\n            return [4 /*yield*/, this.cryptoUtils.hashString(request.oboAssertion)];\n          case 1:\n            // generate the user_assertion_hash for OBOAssertion\n            _a.userAssertionHash = _b.sent();\n            if (!request.skipCache) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n          case 3:\n            _b.trys.push([3, 5,, 7]);\n            return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\n          case 4:\n            return [2 /*return*/, _b.sent()];\n          case 5:\n            _b.sent();\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\n          case 6:\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\n            return [2 /*return*/, _b.sent()];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * Find idtoken in the cache\r\n   * Find accessToken based on user assertion and account info in the cache\r\n   * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n   * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\n            if (!cachedAccessToken) {\n              // Must refresh due to non-existent access_token.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Access token expired, will need to renewed\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n            cachedIdToken = this.readIdTokenFromCacheForOBO(cachedAccessToken.homeAccountId);\n            cachedAccount = null;\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || Constants.EMPTY_STRING\n              };\n              cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\n            }\n            // increment telemetry cache hit counter\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n          case 1:\n            return [2 /*return*/, _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n   * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.readIdTokenFromCacheForOBO = function (atHomeAccountId) {\n    var idTokenFilter = {\n      homeAccountId: atHomeAccountId,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant\n    };\n    var idTokens = this.cacheManager.getIdTokensByFilter(idTokenFilter);\n    // When acquiring a token on behalf of an application, there might not be an id token in the cache\n    if (idTokens.length < 1) {\n      return null;\n    }\n    return idTokens[0];\n  };\n  /**\r\n   * Fetches the cached access token based on incoming assertion\r\n   * @param clientId\r\n   * @param request\r\n   * @param userAssertionHash\r\n   */\n  OnBehalfOfClient.prototype.readAccessTokenFromCacheForOBO = function (clientId, request) {\n    var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\r\n     * Distinguish between Bearer and PoP/SSH token cache types\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n    var credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      credentialType: credentialType,\n      clientId: clientId,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray()),\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash,\n      userAssertionHash: this.userAssertionHash\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n    var numAccessTokens = accessTokens.length;\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n    return accessTokens[0];\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority, userAssertionHash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, userAssertionHash)];\n          case 2:\n            tokenResponse = _a.sent();\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return OnBehalfOfClient;\n}(BaseClient);\nexport { OnBehalfOfClient };","map":{"version":3,"names":["OnBehalfOfClient","_super","__extends","configuration","call","prototype","acquireToken","request","scopeSet","ScopeSet","scopes","_a","cryptoUtils","hashString","oboAssertion","userAssertionHash","_b","sent","skipCache","executeTokenRequest","authority","getCachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCacheForOBO","config","authOptions","clientId","serverTelemetryManager","setCacheOutcome","CacheOutcome","NO_CACHED_ACCESS_TOKEN","logger","info","ClientAuthError","createRefreshRequiredError","TimeUtils","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","cachedIdToken","readIdTokenFromCacheForOBO","homeAccountId","cachedAccount","idTokenObject","AuthToken","secret","cryptoInterface","localAccountId","claims","oid","sub","accountInfo","environment","tenantId","realm","username","Constants","EMPTY_STRING","cacheManager","readAccountFromCache","incrementCacheHits","ResponseHandler","generateAuthenticationResult","account","accessToken","idToken","refreshToken","appMetadata","_c","atHomeAccountId","idTokenFilter","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ID_TOKEN","tenant","idTokens","getIdTokensByFilter","length","authScheme","authenticationScheme","AuthenticationScheme","BEARER","toLowerCase","ACCESS_TOKEN_WITH_AUTH_SCHEME","ACCESS_TOKEN","accessTokenFilter","target","createSearchScopes","asArray","tokenType","keyId","sshKid","requestedClaimsHash","accessTokens","getAccessTokensByFilter","numAccessTokens","createMultipleMatchingTokensInCacheError","queryParametersString","createTokenQueryParameters","endpoint","UrlString","appendQueryString","tokenEndpoint","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","resourceRequestMethod","resourceRequestUri","shrClaims","reqTimestamp","nowSeconds","executePostToTokenEndpoint","response","responseHandler","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","JWT_BEARER","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","addServerTelemetry","correlationId","createNewGuid","addCorrelationId","addRequestTokenUse","AADServerParamKeys","ON_BEHALF_OF","addOboAssertion","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","clientCapabilities","addClaims","createQueryString","BaseClient"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\client\\OnBehalfOfClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType, AADServerParamKeys , CredentialType, Constants, CacheOutcome, AuthenticationScheme } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonOnBehalfOfRequest } from \"../request/CommonOnBehalfOfRequest\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { CredentialFilter } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\r\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport { UrlString } from \"../url/UrlString\";\r\n\r\n/**\r\n * On-Behalf-Of client\r\n */\r\nexport class OnBehalfOfClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n    private userAssertionHash: string;\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        // generate the user_assertion_hash for OBOAssertion\r\n        this.userAssertionHash = await this.cryptoUtils.hashString(request.oboAssertion);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority, this.userAssertionHash);\r\n        }\r\n\r\n        try {\r\n            return await this.getCachedAuthenticationResult(request);\r\n        } catch (e) {\r\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\r\n            return await this.executeTokenRequest(request, this.authority, this.userAssertionHash);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * look up cache for tokens\r\n     * Find idtoken in the cache\r\n     * Find accessToken based on user assertion and account info in the cache\r\n     * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n     * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n     * @param request\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n\r\n        // look in the cache for the access_token which matches the incoming_assertion\r\n        const cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\r\n        if (!cachedAccessToken) {\r\n            // Must refresh due to non-existent access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            // Access token expired, will need to renewed\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            this.logger.info(`OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        }\r\n\r\n        // fetch the idToken from cache\r\n        const cachedIdToken = this.readIdTokenFromCacheForOBO(cachedAccessToken.homeAccountId);\r\n        let idTokenObject: AuthToken | undefined;\r\n        let cachedAccount: AccountEntity | null = null;\r\n        if (cachedIdToken) {\r\n            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\r\n            const localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\r\n            const accountInfo: AccountInfo = {\r\n                homeAccountId: cachedIdToken.homeAccountId,\r\n                environment: cachedIdToken.environment,\r\n                tenantId: cachedIdToken.realm,\r\n                username: Constants.EMPTY_STRING,\r\n                localAccountId: localAccountId || Constants.EMPTY_STRING\r\n            };\r\n\r\n            cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\r\n        }\r\n\r\n        // increment telemetry cache hit counter\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: cachedAccount,\r\n                accessToken: cachedAccessToken,\r\n                idToken: cachedIdToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request,\r\n            idTokenObject);\r\n    }\r\n\r\n    /**\r\n     * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n     * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n     * @param request\r\n     */\r\n    private readIdTokenFromCacheForOBO(atHomeAccountId: string): IdTokenEntity | null {\r\n\r\n        const idTokenFilter: CredentialFilter = {\r\n            homeAccountId: atHomeAccountId,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant\r\n        };\r\n\r\n        const idTokens: IdTokenEntity[] = this.cacheManager.getIdTokensByFilter(idTokenFilter);\r\n\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (idTokens.length < 1) {\r\n            return null;\r\n        }\r\n        return idTokens[0] as IdTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Fetches the cached access token based on incoming assertion\r\n     * @param clientId\r\n     * @param request\r\n     * @param userAssertionHash\r\n     */\r\n    private readAccessTokenFromCacheForOBO(clientId: string, request: CommonOnBehalfOfRequest) {\r\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        const credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\r\n\r\n        const accessTokenFilter: CredentialFilter = {\r\n            credentialType: credentialType,\r\n            clientId,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray()),\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n            userAssertionHash: this.userAssertionHash\r\n        };\r\n\r\n        const accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\r\n\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        } else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonOnBehalfOfRequest, authority: Authority, userAssertionHash: string)\r\n        : Promise<AuthenticationResult | null> {\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            undefined,\r\n            userAssertionHash\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonOnBehalfOfRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\r\n\r\n        parameterBuilder.addOboAssertion(request.oboAssertion);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (request.claims || (this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0)) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n       \r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}