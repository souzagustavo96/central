{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __assign, __generator, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\nvar AuthorizationCodeClient = /** @class */function (_super) {\n  __extends(AuthorizationCodeClient, _super);\n  function AuthorizationCodeClient(configuration, performanceClient) {\n    var _this = _super.call(this, configuration, performanceClient) || this;\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    _this.includeRedirectUri = true;\n    return _this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n            return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\n          case 1:\n            queryString = _c.sent();\n            return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n        }\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    var _a, _b, _c, _d, _e, _f;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, requestId, httpVerAuthority, responseHandler;\n      var _this = this;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!request || !request.code) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n            atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(\"AuthCodeClientAcquireToken\", request.correlationId);\n            this.logger.info(\"in acquireToken call in auth-code client\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _g.sent();\n            requestId = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_REQUEST_ID];\n            httpVerAuthority = (_e = response.headers) === null || _e === void 0 ? void 0 : _e[HeaderNames.X_MS_HTTP_VERSION];\n            if (httpVerAuthority) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n                httpVerAuthority: httpVerAuthority\n              });\n            }\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId).then(function (result) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    // Deserialize hash fragment response parameters.\n    var hashUrlString = new UrlString(hashFragment);\n    // Deserialize hash fragment response parameters.\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n    var queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, ccsCredential, clientInfo, headers, thumbprint;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _c.sent();\n            ccsCredential = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\n      var _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            /*\r\n             * For hybrid spa flow, there will be a code but no verifier\r\n             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n             */\n            if (!this.includeRedirectUri) {\n              // Just validate\n              RequestValidator.validateRedirectUri(request.redirectUri);\n            } else {\n              // Validate and include redirect uri\n              parameterBuilder.addRedirectUri(request.redirectUri);\n            }\n            // Add scope array, parameter builder will add default scopes and dedupe\n            parameterBuilder.addScopes(request.scopes);\n            // add code: user set, not validated\n            parameterBuilder.addAuthorizationCode(request.code);\n            // Add library metadata\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            // add code_verifier if passed\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _d.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _d.label = 3;\n          case 3:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            ccsCred = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            }\n            // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n            if (request.tokenBodyParameters) {\n              parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n            }\n            // Add hybrid spa parameters if not already provided\n            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n              parameterBuilder.addExtraQueryParameters((_c = {}, _c[AADServerParamKeys.RETURN_SPA_CODE] = \"1\", _c));\n            }\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n            parameterBuilder.addScopes(requestScopes);\n            // validate the redirectUri (to be a non null value)\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            // add response_mode. If not passed in it defaults to query.\n            parameterBuilder.addResponseMode(request.responseMode);\n            // add response_type = code\n            parameterBuilder.addResponseTypeCode();\n            // add library info parameters\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            // add client_info=1\n            parameterBuilder.addClientInfo();\n            if (request.codeChallenge && request.codeChallengeMethod) {\n              parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n            }\n            if (request.prompt) {\n              parameterBuilder.addPrompt(request.prompt);\n            }\n            if (request.domainHint) {\n              parameterBuilder.addDomainHint(request.domainHint);\n            }\n            // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n              // AAD will throw if prompt=select_account is passed with an account hint\n              if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n              } else if (request.account) {\n                accountSid = this.extractAccountSid(request.account);\n                accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                  parameterBuilder.addLoginHint(accountLoginHintClaim);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                  /*\r\n                   * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                   * SessionId is only used in silent calls\r\n                   */\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                  parameterBuilder.addSid(accountSid);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (request.loginHint) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                  parameterBuilder.addLoginHint(request.loginHint);\n                  parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                  // Fallback to account username if provided\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                  parameterBuilder.addLoginHint(request.account.username);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                }\n              } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n              }\n            } else {\n              this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n            }\n            if (request.nonce) {\n              parameterBuilder.addNonce(request.nonce);\n            }\n            if (request.state) {\n              parameterBuilder.addState(request.state);\n            }\n            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (request.extraQueryParameters) {\n              parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n            }\n            if (!request.nativeBroker) return [3 /*break*/, 2];\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _b.sent();\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\n  };\n  AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\n  };\n  return AuthorizationCodeClient;\n}(BaseClient);\nexport { AuthorizationCodeClient };","map":{"version":3,"names":["AuthorizationCodeClient","_super","__extends","configuration","performanceClient","_this","call","includeRedirectUri","prototype","getAuthCodeUrl","request","_a","addQueueMeasurement","PerformanceEvents","GetAuthCodeUrl","correlationId","_b","setPreQueueTime","AuthClientCreateQueryString","createAuthCodeUrlQueryString","queryString","_c","sent","UrlString","appendQueryString","authority","authorizationEndpoint","acquireToken","authCodePayload","code","ClientAuthError","createTokenRequestCannotBeMadeError","AuthClientAcquireToken","atsMeasurement","startMeasurement","logger","info","reqTimestamp","TimeUtils","nowSeconds","AuthClientExecuteTokenRequest","executeTokenRequest","response","_g","requestId","_d","headers","HeaderNames","X_MS_REQUEST_ID","httpVerAuthority","_e","X_MS_HTTP_VERSION","addStaticFields","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","_f","HandleServerTokenResponse","handleServerTokenResponse","undefined","then","result","endMeasurement","success","catch","error","verbose","errorCode","subErrorCode","subError","handleFragmentResponse","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","__assign","getLogoutUri","logoutRequest","ClientConfigurationError","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","AuthClientCreateTokenRequestBody","queryParametersString","createTokenQueryParameters","endpoint","tokenEndpoint","createTokenRequestBody","requestBody","ccsCredential","clientInfo","buildClientInfo","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","type","CcsCredentialType","HOME_ACCOUNT_ID","e","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","RequestValidator","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","GrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","PopTokenGenerateCnf","generateCnf","reqCnfData","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","cryptoInterface","createNewGuid","addCorrelationId","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","tokenBodyParameters","addExtraQueryParameters","enableSpaAuthorizationCode","AADServerParamKeys","RETURN_SPA_CODE","createQueryString","requestScopes","__spreadArrays","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","account","accountSid","extractAccountSid","accountLoginHintClaim","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","isEmpty","extraQueryParameters","nativeBroker","addNativeBroker","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint","BaseClient"],"sources":["C:\\Users\\gustavo.souza\\OneDrive - INSTITUTO DONATO DE OFTALMOLOGIA LTDA\\Documentos\\PROJETOS\\PAINEL_BI\\frontend\\node_modules\\@azure\\msal-common\\src\\client\\AuthorizationCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\r\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType, AuthenticationScheme, PromptValue, Separators, AADServerParamKeys, HeaderNames } from \"../utils/Constants\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\r\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from \"../account/ClientInfo\";\r\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { RequestValidator } from \"../request/RequestValidator\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\n\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nexport class AuthorizationCodeClient extends BaseClient {\r\n    // Flag to indicate if client is for hybrid spa auth code redemption\r\n    protected includeRedirectUri: boolean = true;\r\n\r\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\r\n        super(configuration, performanceClient);\r\n    }\r\n\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\r\n\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\r\n        const queryString = await this.createAuthCodeUrlQueryString(request);\r\n\r\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\r\n    }\r\n\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\r\n        if (!request || !request.code) {\r\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n        }\r\n\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\r\n        \r\n        // @ts-ignore\r\n        const atsMeasurement = this.performanceClient?.startMeasurement(\"AuthCodeClientAcquireToken\", request.correlationId);\r\n        this.logger.info(\"in acquireToken call in auth-code client\");\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n        const response = await this.executeTokenRequest(this.authority, request);\r\n\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const httpVerAuthority = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\r\n        if(httpVerAuthority)\r\n        {\r\n            atsMeasurement?.addStaticFields({\r\n                httpVerAuthority\r\n            });\r\n        }\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin,\r\n            this.performanceClient\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\r\n        return responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            authCodePayload,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            requestId\r\n        ).then((result: AuthenticationResult) => {\r\n            atsMeasurement?.endMeasurement({\r\n                success: true\r\n            });\r\n            return result;\r\n        })\r\n            .catch((error) => {\r\n                this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\r\n                atsMeasurement?.endMeasurement({\r\n                    errorCode: error.errorCode,\r\n                    subErrorCode: error.subError,\r\n                    success: false\r\n                });\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\r\n        // Handle responses.\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n\r\n        // Deserialize hash fragment response parameters.\r\n        const hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return {\r\n            ...serverParams,\r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n        \r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        \r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        \r\n        let ccsCredential: CcsCredential | undefined = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                ccsCredential = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                };\r\n            } catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */\r\n        if (!this.includeRedirectUri) {\r\n            // Just validate\r\n            RequestValidator.validateRedirectUri(request.redirectUri);\r\n        } else {\r\n            // Validate and include redirect uri\r\n            parameterBuilder.addRedirectUri(request.redirectUri);\r\n        }\r\n\r\n        // Add scope array, parameter builder will add default scopes and dedupe\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        // add code: user set, not validated\r\n        parameterBuilder.addAuthorizationCode(request.code);\r\n\r\n        // Add library metadata\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        // add code_verifier if passed\r\n        if (request.codeVerifier) {\r\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n\r\n            this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                parameterBuilder.addSshJwk(request.sshJwk);\r\n            } else {\r\n                throw ClientConfigurationError.createMissingSshJwkError();\r\n            }\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        let ccsCred: CcsCredential | undefined = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                ccsCred = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                };\r\n            } catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        } else {\r\n            ccsCred = request.ccsCredential;\r\n        }\r\n\r\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (request.tokenBodyParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\r\n        }\r\n\r\n        // Add hybrid spa parameters if not already provided\r\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\r\n            parameterBuilder.addExtraQueryParameters({\r\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\"\r\n            });\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    private async createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): Promise<string> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\r\n\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\r\n        parameterBuilder.addScopes(requestScopes);\r\n\r\n        // validate the redirectUri (to be a non null value)\r\n        parameterBuilder.addRedirectUri(request.redirectUri);\r\n\r\n        // generate the correlationId if not set by the user and add\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        // add response_mode. If not passed in it defaults to query.\r\n        parameterBuilder.addResponseMode(request.responseMode);\r\n\r\n        // add response_type = code\r\n        parameterBuilder.addResponseTypeCode();\r\n\r\n        // add library info parameters\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n\r\n        // add client_info=1\r\n        parameterBuilder.addClientInfo();\r\n\r\n        if (request.codeChallenge && request.codeChallengeMethod) {\r\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n        }\r\n\r\n        if (request.prompt) {\r\n            parameterBuilder.addPrompt(request.prompt);\r\n        }\r\n\r\n        if (request.domainHint) {\r\n            parameterBuilder.addDomainHint(request.domainHint);\r\n        }\r\n\r\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n            // AAD will throw if prompt=select_account is passed with an account hint\r\n            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                // SessionID is only used in silent calls\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                parameterBuilder.addSid(request.sid);\r\n            } else if (request.account) {\r\n                const accountSid = this.extractAccountSid(request.account);\r\n                const accountLoginHintClaim = this.extractLoginHint(request.account);\r\n                // If login_hint claim is present, use it over sid/username\r\n                if (accountLoginHintClaim) {\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\r\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                    }\r\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                    /*\r\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                     * SessionId is only used in silent calls\r\n                     */\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                    parameterBuilder.addSid(accountSid);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                    }\r\n                } else if (request.loginHint) {\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                    parameterBuilder.addLoginHint(request.loginHint);\r\n                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                } else if (request.account.username) {\r\n                    // Fallback to account username if provided\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                    parameterBuilder.addLoginHint(request.account.username);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                    }\r\n                }\r\n            } else if (request.loginHint) {\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                parameterBuilder.addLoginHint(request.loginHint);\r\n                parameterBuilder.addCcsUpn(request.loginHint);\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n        }\r\n\r\n        if (request.nonce) {\r\n            parameterBuilder.addNonce(request.nonce);\r\n        }\r\n\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        if (request.nativeBroker) {\r\n            // signal ests that this is a WAM call\r\n            parameterBuilder.addNativeBroker();\r\n\r\n            // pass the req_cnf for POP\r\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n                const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                // to reduce the URL length, it is recommended to send the short form of the req_cnf\r\n                const reqCnfData = await popTokenGenerator.generateCnf(request);\r\n                parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n            }\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n\r\n        if (request.logoutHint) {\r\n            parameterBuilder.addLogoutHint(request.logoutHint);\r\n        }\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    private extractAccountSid(account: AccountInfo): string | null {\r\n        return account.idTokenClaims?.sid || null;\r\n    }\r\n\r\n    private extractLoginHint(account: AccountInfo): string | null {\r\n        return account.idTokenClaims?.login_hint || null;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}